const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function testAdvancedChatFeatures() {
  try {
    // 1. –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîê –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const pmLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });
    const pmToken = pmLoginResponse.data.token;

    const executorLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'executor5@test.test',
      password: 'password123'
    });
    const executorToken = executorLoginResponse.data.token;

    const adminLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@admin.admin',
      password: 'password123'
    });
    const adminToken = adminLoginResponse.data.token;

    console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã');

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ —á–∞—Ç
    console.log('\nüìã –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç...');
    const projectsResponse = await axios.get(`${BASE_URL}/projects`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    const project = projectsResponse.data[0];

    const chatsResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    const testChat = chatsResponse.data[0];
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç: ${testChat.name} (${testChat.id})`);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    console.log('\nüìñ Executor –æ—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ...');
    try {
      const readResponse = await axios.post(`${BASE_URL}/projects/${project.id}/chats/${testChat.id}/read`, {}, {
        headers: { Authorization: `Bearer ${executorToken}` }
      });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', readResponse.data.message);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error.response?.data?.message || error.message);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç
    console.log('\nüë• PM –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç...');
    try {
      const addParticipantResponse = await axios.post(`${BASE_URL}/projects/${project.id}/chats/${testChat.id}/participants`, {
        userId: '9tFHRBCdhdNh3TDmdAdNQpT9GzY2' // executor2@test.test
      }, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', addParticipantResponse.data.message);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error.response?.data?.message || error.message);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
    const updatedChatsResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    const updatedChat = updatedChatsResponse.data.find(c => c.id === testChat.id);
    console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ: ${updatedChat.participants.length}`);
    updatedChat.participants.forEach((participant, index) => {
      console.log(`${index + 1}. ${participant.name} (${participant.id})`);
    });

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    console.log('\nüåê Admin —Å–æ–∑–¥–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç...');
    try {
      const globalChatResponse = await axios.post(`${BASE_URL}/chats/global`, {
        name: '–û–±—â–∏–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        type: 'group',
        participants: ['5W6YYoii6HYhwWaI4zZSz15siSA3', 'QH040Apx3segNZ9zHJrLP8y4UPD2'] // PM –∏ Executor
      }, {
        headers: { Authorization: `Bearer ${adminToken}` }
      });
      console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:', globalChatResponse.data.message);
      
      const globalChatId = globalChatResponse.data.chatId;

      // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç
      console.log('\nüí¨ Admin –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç...');
      const globalMessageResponse = await axios.post(`${BASE_URL}/chats/global/${globalChatId}/messages`, {
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç!'
      }, {
        headers: { Authorization: `Bearer ${adminToken}` }
      });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', globalMessageResponse.data.message);

      // 8. PM —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
      console.log('\nüì® PM —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞...');
      const globalMessagesResponse = await axios.get(`${BASE_URL}/chats/global/${globalChatId}/messages`, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${globalMessagesResponse.data.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —á–∞—Ç–µ:`);
      globalMessagesResponse.data.forEach((msg, index) => {
        console.log(`${index + 1}. [${msg.sender?.name || 'Unknown'}]: ${msg.text}`);
      });

    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º —á–∞—Ç–æ–º:', error.response?.data?.message || error.message);
    }

    // 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüì® –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã PM...');
    try {
      const allChatsResponse = await axios.get(`${BASE_URL}/chats`, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${allChatsResponse.data.length} —á–∞—Ç–æ–≤ –≤—Å–µ–≥–æ:`);
      allChatsResponse.data.forEach((chat, index) => {
        const chatType = chat.isGlobal ? '[–ì–ª–æ–±–∞–ª—å–Ω—ã–π]' : `[–ü—Ä–æ–µ–∫—Ç: ${chat.projectTitle}]`;
        console.log(`${index + 1}. ${chat.name} ${chatType}`);
      });
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤:', error.response?.data?.message || error.message);
    }

    // 10. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
    console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞...');
    try {
      const statsResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats/${testChat.id}/statistics`, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:');
      console.log(`   - –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${statsResponse.data.totalMessages}`);
      console.log(`   - –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: ${statsResponse.data.averageMessagesPerDay.toFixed(1)}`);
      console.log(`   - –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
      statsResponse.data.mostActiveUsers.forEach((user, index) => {
        console.log(`     ${index + 1}. ${user.fullName || 'Unknown'}: ${user.count} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      });
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.response?.data?.message || error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP Status: ${error.response.status}`);
    }
  }
}

testAdvancedChatFeatures(); 