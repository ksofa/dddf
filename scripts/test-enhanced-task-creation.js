const { db } = require('../src/config/firebase');

async function testEnhancedTaskCreation() {
  try {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...\n');

    // 1. –ù–∞–π–¥–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üîç –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    const projectsSnapshot = await db.collection('projects').limit(1).get();
    
    if (projectsSnapshot.empty) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const projectDoc = projectsSnapshot.docs[0];
    const projectId = projectDoc.id;
    const projectData = projectDoc.data();
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${projectData.title} (ID: ${projectId})`);

    // 2. –ù–∞–π–¥–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    console.log('\nüë• –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã...');
    const teamMembers = projectData.team || [];
    const pmId = projectData.pmId || projectData.teamLead;
    
    console.log(`PM: ${pmId}`);
    console.log(`–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${teamMembers.join(', ')}`);

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const testTasks = [
      {
        text: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ',
        column: 'todo',
        status: 'todo',
        priority: 'critical',
        color: '#EF4444',
        description: '–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        assignee: teamMembers[0] || pmId,
        dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000) // –∑–∞–≤—Ç—Ä–∞
      },
      {
        text: '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Ñ–∏—á—É',
        column: 'backlog',
        status: 'backlog',
        priority: 'high',
        color: '#F59E0B',
        description: '–í–∞–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞',
        assignee: teamMembers[1] || teamMembers[0] || pmId,
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      },
      {
        text: '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é',
        column: 'todo',
        status: 'todo',
        priority: 'medium',
        color: '#3B82F6',
        description: '–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞',
        assignee: null, // –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏
      },
      {
        text: '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞',
        column: 'backlog',
        status: 'backlog',
        priority: 'low',
        color: '#10B981',
        description: '–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –≤ –º–æ–¥—É–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        assignee: teamMembers[0] || pmId,
        dueDate: null // –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
      }
    ];

    console.log('\nüìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...');

    for (let i = 0; i < testTasks.length; i++) {
      const task = testTasks[i];
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω
        let assigneeDetails = null;
        if (task.assignee) {
          const assigneeDoc = await db.collection('users').doc(task.assignee).get();
          if (assigneeDoc.exists) {
            const assigneeData = assigneeDoc.data();
            assigneeDetails = {};
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            assigneeDetails.id = task.assignee;
            if (assigneeData.displayName) assigneeDetails.fullName = assigneeData.displayName;
            else if (assigneeData.name) assigneeDetails.fullName = assigneeData.name;
            else assigneeDetails.fullName = 'Unknown User';
            
            if (assigneeData.email) assigneeDetails.email = assigneeData.email;
            if (assigneeData.profileImage) assigneeDetails.profileImage = assigneeData.profileImage;
            else if (assigneeData.avatarUrl) assigneeDetails.profileImage = assigneeData.avatarUrl;
          }
        }

        const taskData = {
          text: task.text,
          column: task.column,
          status: task.status,
          priority: task.priority,
          createdAt: new Date(),
          createdBy: pmId || 'system',
          updatedAt: new Date(),
          updatedBy: pmId || 'system'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if (task.assignee) taskData.assignee = task.assignee;
        if (assigneeDetails) taskData.assigneeDetails = assigneeDetails;
        if (task.color) taskData.color = task.color;
        if (task.dueDate) taskData.dueDate = task.dueDate;
        if (task.description) taskData.description = task.description;

        const taskRef = await db.collection('projects')
          .doc(projectId)
          .collection('tasks')
          .add(taskData);

        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: "${task.text}" (ID: ${taskRef.id})`);
        console.log(`     - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}`);
        console.log(`     - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${assigneeDetails ? assigneeDetails.fullName : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
        console.log(`     - –î–µ–¥–ª–∞–π–Ω: ${task.dueDate ? task.dueDate.toLocaleDateString('ru-RU') : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(`     - –¶–≤–µ—Ç: ${task.color}`);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
        await db.collection('projects')
          .doc(projectId)
          .collection('activity')
          .add({
            type: 'task_created',
            userId: pmId || 'system',
            details: {
              taskId: taskRef.id,
              text: task.text,
              column: task.column,
              assignee: task.assignee,
              priority: task.priority
            },
            timestamp: new Date()
          });

      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ "${task.text}":`, error.message);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...');
    const tasksSnapshot = await db.collection('projects')
      .doc(projectId)
      .collection('tasks')
      .orderBy('createdAt', 'desc')
      .limit(10)
      .get();

    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${tasksSnapshot.size}`);
    
    tasksSnapshot.forEach(doc => {
      const task = doc.data();
      console.log(`  üìã ${task.text}`);
      console.log(`     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority || '–Ω–µ —É–∫–∞–∑–∞–Ω'} | –°—Ç–∞—Ç—É—Å: ${task.status} | –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assigneeDetails?.fullName || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...');
    const columnsSnapshot = await db.collection('projects')
      .doc(projectId)
      .collection('columns')
      .orderBy('order')
      .get();

    if (columnsSnapshot.empty) {
      console.log('‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ...');
      
      const defaultColumns = [
        { name: '–ë—ç–∫–ª–æ–≥', order: 0 },
        { name: '–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å', order: 1 },
        { name: '–í —Ä–∞–±–æ—Ç–µ', order: 2 },
        { name: '–ü—Ä–∞–≤–∫–∏', order: 3 },
        { name: '–ì–æ—Ç–æ–≤–æ', order: 4 }
      ];

      for (const column of defaultColumns) {
        await db.collection('projects')
          .doc(projectId)
          .collection('columns')
          .add({
            ...column,
            createdAt: new Date(),
            createdBy: pmId || 'system'
          });
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${column.name}`);
      }
    } else {
      console.log('üìÇ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:');
      columnsSnapshot.forEach(doc => {
        const column = doc.data();
        console.log(`  - ${column.name} (–ø–æ—Ä—è–¥–æ–∫: ${column.order})`);
      });
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

async function main() {
  await testEnhancedTaskCreation();
  process.exit(0);
}

main().catch(console.error); 