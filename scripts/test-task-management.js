const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const PM_CREDENTIALS = {
  email: 'pm@test.test',
  password: 'password123'
};

let authToken = '';
let projectId = '';
let taskId = '';

async function testTaskManagement() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è PM\n');

    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ PM
    console.log('1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ PM...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, PM_CREDENTIALS);
    authToken = loginResponse.data.token;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectsResponse = await axios.get(`${API_BASE}/projects`);
    const projects = projectsResponse.data;
    
    if (projects.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤');
      return;
    }

    projectId = projects[0].id;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${projects[0].title} (ID: ${projectId})`);

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...');
    const newTaskData = {
      text: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç PM',
      column: 'todo',
      status: 'todo',
      priority: 'high',
      color: '#FF6B6B',
      description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PM'
    };

    const createTaskResponse = await axios.post(
      `${API_BASE}/projects/${projectId}/tasks`,
      newTaskData
    );
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', createTaskResponse.data.message);

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á...');
    const tasksResponse = await axios.get(`${API_BASE}/projects/${projectId}/tasks`);
    const tasks = tasksResponse.data;
    
    if (tasks.length === 0) {
      console.log('‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à—É —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    const createdTask = tasks.find(task => task.text === newTaskData.text);
    if (!createdTask) {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ');
      return;
    }

    taskId = createdTask.id;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–Ω—É—é (ID: ${taskId})`);

    // 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ
    console.log('\n5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ...');
    const commentData = {
      text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç PM –∫ –∑–∞–¥–∞—á–µ'
    };

    const addCommentResponse = await axios.post(
      `${API_BASE}/projects/${projectId}/tasks/${taskId}/comments`,
      commentData
    );
    console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', addCommentResponse.data.message);

    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–µ
    console.log('\n6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–µ...');
    const commentsResponse = await axios.get(
      `${API_BASE}/projects/${projectId}/tasks/${taskId}/comments`
    );
    const comments = commentsResponse.data;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–µ`);

    if (comments.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', comments[0].text);
    }

    // 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    console.log('\n7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏...');
    const updateTaskResponse = await axios.put(
      `${API_BASE}/projects/${projectId}/tasks/${taskId}`,
      {
        status: 'in_progress',
        column: 'in_progress'
      }
    );
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"');

    // 8. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (comments.length > 0) {
      console.log('\n8. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...');
      const commentId = comments[0].id;
      
      try {
        await axios.delete(
          `${API_BASE}/projects/${projectId}/tasks/${taskId}/comments/${commentId}`
        );
        console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      } catch (error) {
        console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error.response?.data?.message || error.message);
      }
    }

    // 9. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log('\n9. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
    try {
      const deleteTaskResponse = await axios.delete(
        `${API_BASE}/projects/${projectId}/tasks/${taskId}`
      );
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:', deleteTaskResponse.data.message);
    } catch (error) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.response?.data?.message || error.message);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:');
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á');
    console.log('   ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    console.log('   ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    console.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    console.log('   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else if (error.response?.status === 403) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ PM –∫ –ø—Ä–æ–µ–∫—Ç—É');
    } else if (error.response?.status === 404) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testTaskManagement(); 