const admin = require('firebase-admin');
const fetch = require('node-fetch');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
const serviceAccount = require('../src/config/serviceAccountKey.json');

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://taska-app-default-rtdb.firebaseio.com"
  });
}

const API_BASE = 'http://localhost:3000/api';

async function generateToken(uid) {
  try {
    const customToken = await admin.auth().createCustomToken(uid);
    return customToken;
  } catch (error) {
    console.error('Error generating token:', error);
    throw error;
  }
}

async function testInvitationSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫...\n');

  try {
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    console.log('1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
    const pmToken = await generateToken('5W6YYoii6HYhwWaI4zZSz15siSA3'); // PM
    const executorToken = await generateToken('frontend1_uid'); // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã\n');

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –æ—Ç PM –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    console.log('2. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –æ—Ç PM –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é...');
    const inviteResponse = await fetch(`${API_BASE}/projects/project-1/invite`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${pmToken}`
      },
      body: JSON.stringify({
        userId: 'frontend1_uid',
        message: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É! –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±—É–¥—É—Ç –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã.'
      })
    });

    if (inviteResponse.ok) {
      const inviteResult = await inviteResponse.json();
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', inviteResult);
    } else {
      const error = await inviteResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:', error);
    }
    console.log('');

    // 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    console.log('3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...');
    const invitationsResponse = await fetch(`${API_BASE}/invitations?status=pending`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${executorToken}`
      }
    });

    if (invitationsResponse.ok) {
      const invitations = await invitationsResponse.json();
      console.log('‚úÖ –ó–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', invitations.length, '—à—Ç.');
      
      if (invitations.length > 0) {
        const invitation = invitations[0];
        console.log('üìã –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞:', {
          id: invitation.id,
          projectName: invitation.projectName,
          senderName: invitation.senderName,
          message: invitation.message,
          status: invitation.status
        });

        // 4. –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É
        console.log('\n4. –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏...');
        const respondResponse = await fetch(`${API_BASE}/invitations/${invitation.id}/respond`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${executorToken}`
          },
          body: JSON.stringify({
            action: 'accept'
          })
        });

        if (respondResponse.ok) {
          const respondResult = await respondResponse.json();
          console.log('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:', respondResult);
        } else {
          const error = await respondResponse.json();
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏:', error);
        }
      }
    } else {
      const error = await invitationsResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
    }
    console.log('');

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è PM
    console.log('5. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è PM...');
    const projectInvitationsResponse = await fetch(`${API_BASE}/projects/project-1/invitations`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${pmToken}`
      }
    });

    if (projectInvitationsResponse.ok) {
      const projectInvitations = await projectInvitationsResponse.json();
      console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:', projectInvitations.length, '—à—Ç.');
      projectInvitations.forEach((inv, index) => {
        console.log(`üì§ –ó–∞—è–≤–∫–∞ ${index + 1}:`, {
          userName: inv.userName,
          status: inv.status,
          message: inv.message.substring(0, 50) + '...'
        });
      });
    } else {
      const error = await projectInvitationsResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testInvitationSystem(); 