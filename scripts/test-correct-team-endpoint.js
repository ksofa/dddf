const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

// PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const PM_EMAIL = 'pm@mail.ru';
const PM_PASSWORD = '123456';

async function testCorrectTeamEndpoint() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞...\n');

    // 1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: PM_EMAIL,
      password: PM_PASSWORD
    });

    const { token, user } = loginResponse.data;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è:', {
      uid: user.uid,
      email: user.email,
      roles: user.roles
    });

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get(`${API_BASE}/projects`, { headers });
    const projects = projectsResponse.data;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    
    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const testProject = projects[0];
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', {
      id: testProject.id,
      title: testProject.title,
      pmId: testProject.pmId,
      manager: testProject.manager
    });

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint (projects.js)
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /api/projects/:projectId/team...');
    const teamResponse = await axios.get(`${API_BASE}/projects/${testProject.id}/team`, { headers });
    const teamData = teamResponse.data;
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω—ã (projects.js):', {
      projectId: teamData.projectId,
      projectTitle: teamData.projectTitle,
      teamMembersCount: teamData.teamMembers.length,
      canManage: teamData.canManage
    });

    // 4. –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º frontend-api endpoint
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /api/:projectId/team (frontend-api)...');
    try {
      const frontendTeamResponse = await axios.get(`${API_BASE}/${testProject.id}/team`, { headers });
      const frontendTeamData = frontendTeamResponse.data;
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω—ã (frontend-api):', {
        projectId: frontendTeamData.projectId,
        projectTitle: frontendTeamData.projectTitle,
        teamMembersCount: frontendTeamData.teamMembers.length,
        canManage: frontendTeamData.canManage
      });
    } catch (error) {
      console.log('‚ùå Frontend-api endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.response?.status, error.response?.data?.error);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ endpoint...');
    const isPM = user.roles?.includes('pm') || user.roles?.includes('project_manager') || user.role === 'pm';
    const isProjectManager = teamData.canManage || user.roles?.includes('admin');
    const canInvite = isPM && isProjectManager;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', {
      userRoles: user.roles,
      isPM,
      canManageFromAPI: teamData.canManage,
      isProjectManager,
      canInvite,
      pmIdMatch: testProject.pmId === user.uid
    });

    if (!canInvite) {
      console.log('‚ùå PM –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π!');
      console.log('üîç –ü—Ä–∏—á–∏–Ω—ã:');
      console.log(`   - isPM: ${isPM}`);
      console.log(`   - isProjectManager: ${isProjectManager}`);
      console.log(`   - canManage from API: ${teamData.canManage}`);
      console.log(`   - pmId match: ${testProject.pmId === user.uid}`);
      return;
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    console.log('\n6. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ /api/users/executors/search...');
    try {
      const executorsResponse = await axios.get(`${API_BASE}/users/executors/search`, { headers });
      const executors = executorsResponse.data;
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${executors.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ users endpoint`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ users endpoint:', error.response?.status, error.response?.data);
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ frontend-api endpoint
    console.log('\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ /api/executors/search...');
    try {
      const frontendExecutorsResponse = await axios.get(`${API_BASE}/executors/search`, { headers });
      const frontendExecutors = frontendExecutorsResponse.data;
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${frontendExecutors.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ frontend-api endpoint`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:');
      frontendExecutors.slice(0, 3).forEach((executor, index) => {
        console.log(`   ${index + 1}. ${executor.name} (${executor.email}) - ${executor.specialization}`);
      });

      // 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
      if (frontendExecutors.length > 0) {
        const testExecutor = frontendExecutors[0];
        console.log(`\n8. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: ${testExecutor.name}...`);
        
        const inviteResponse = await axios.post(`${API_BASE}/projects/${testProject.id}/invite`, {
          executorId: testExecutor.id,
          message: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç'
        }, { headers });
        
        console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', inviteResponse.data);
      }

    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ frontend-api endpoint:', error.response?.status, error.response?.data);
    }

    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    
    if (error.response?.status === 403) {
      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ 403:');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. PM –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞');
      console.log('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π');
      console.log('3. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }
}

testCorrectTeamEndpoint(); 