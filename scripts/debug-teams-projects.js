// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
const { db } = require('../src/config/firebase');

async function debugTeamsProjects() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥...');
    const teamsSnapshot = await db.collection('teams').get();
    console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${teamsSnapshot.size}\n`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectsSnapshot = await db.collection('projects').get();
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsSnapshot.size}\n`);
    
    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    console.log('3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    const projects = {};
    for (const doc of projectsSnapshot.docs) {
      const projectData = { id: doc.id, ...doc.data() };
      projects[doc.id] = projectData;
      
      console.log(`\nüìã –ü—Ä–æ–µ–∫—Ç: ${projectData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      console.log(`   ID: ${doc.id}`);
      console.log(`   PM ID: ${projectData.pmId || projectData.manager || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${projectData.createdAt ? new Date(projectData.createdAt.seconds * 1000).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º PM
      const pmId = projectData.pmId || projectData.manager;
      if (pmId) {
        try {
          const pmDoc = await db.collection('users').doc(pmId).get();
          if (pmDoc.exists) {
            const pmData = pmDoc.data();
            console.log(`   PM: ${pmData.fullName || pmData.displayName || pmData.email} (${pmData.email})`);
          } else {
            console.log(`   ‚ö†Ô∏è PM –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
          }
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PM: ${error.message}`);
        }
      }
    }
    
    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö —Å–≤—è–∑—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    console.log('\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥ –∏ —Å–≤—è–∑–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏:');
    for (const doc of teamsSnapshot.docs) {
      const teamData = { id: doc.id, ...doc.data() };
      
      console.log(`\nüìã –ö–æ–º–∞–Ω–¥–∞: ${teamData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      console.log(`   ID: ${doc.id}`);
      console.log(`   PM ID: ${teamData.pmId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –ü—Ä–æ–µ–∫—Ç ID: ${teamData.projectId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ PM
      if (teamData.projectId && projects[teamData.projectId]) {
        const project = projects[teamData.projectId];
        const projectPmId = project.pmId || project.manager;
        console.log(`   –ü—Ä–æ–µ–∫—Ç: ${project.title}`);
        console.log(`   PM –ø—Ä–æ–µ–∫—Ç–∞: ${projectPmId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        
        if (projectPmId) {
          try {
            const pmDoc = await db.collection('users').doc(projectPmId).get();
            if (pmDoc.exists) {
              const pmData = pmDoc.data();
              console.log(`   ‚úÖ PM –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω: ${pmData.fullName || pmData.displayName || pmData.email} (${pmData.email})`);
            } else {
              console.log(`   ‚ùå PM –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            }
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PM –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
          }
        }
      } else if (teamData.projectId) {
        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç ${teamData.projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–≥–æ PM –∫–æ–º–∞–Ω–¥—ã
      if (teamData.pmId) {
        try {
          const pmDoc = await db.collection('users').doc(teamData.pmId).get();
          if (pmDoc.exists) {
            const pmData = pmDoc.data();
            console.log(`   ‚úÖ –ü—Ä—è–º–æ–π PM –∫–æ–º–∞–Ω–¥—ã: ${pmData.fullName || pmData.displayName || pmData.email} (${pmData.email})`);
          } else {
            console.log(`   ‚ùå –ü—Ä—è–º–æ–π PM –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ PM: ${error.message}`);
        }
      }
    }
    
    console.log('\nüéâ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugTeamsProjects().then(() => {
  process.exit(0);
}).catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 