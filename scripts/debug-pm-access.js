const { db } = require('../src/config/firebase');

async function debugPMAccess() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –¥–æ—Å—Ç—É–ø–∞ PM...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pmSnapshot = await db.collection('users').where('email', '==', 'pm@mail.ru').get();
    if (pmSnapshot.empty) {
      console.log('‚ùå PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const pmUser = pmSnapshot.docs[0];
    const pmData = pmUser.data();
    console.log('üë§ PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: pmUser.id,
      email: pmData.email,
      roles: pmData.roles,
      uid: pmData.uid
    });

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    const projectsSnapshot = await db.collection('projects').where('pmId', '==', pmUser.id).get();
    console.log(`\nüìÅ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM: ${projectsSnapshot.size}`);
    
    if (projectsSnapshot.empty) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤');
      return;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const project = projectsSnapshot.docs[0];
    const projectData = project.data();
    console.log('\nüìã –ü–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç PM:', {
      id: project.id,
      title: projectData.title,
      pmId: projectData.pmId,
      manager: projectData.manager,
      teamLead: projectData.teamLead,
      teamMembers: projectData.teamMembers,
      team: projectData.team
    });

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–ª–æ–≥–∏–∫–∞ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
    const isUserPM = pmUser.id === projectData.teamLead ||
                     pmUser.id === projectData.manager ||
                     pmUser.id === projectData.pmId ||
                     pmData.roles?.includes('admin') ||
                     (pmData.roles?.includes('pm') && (
                       projectData.teamLead === pmUser.id || 
                       projectData.manager === pmUser.id || 
                       projectData.pmId === pmUser.id
                     ));

    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:');
    console.log('- pmUser.id === projectData.teamLead:', pmUser.id === projectData.teamLead);
    console.log('- pmUser.id === projectData.manager:', pmUser.id === projectData.manager);
    console.log('- pmUser.id === projectData.pmId:', pmUser.id === projectData.pmId);
    console.log('- pmData.roles?.includes("admin"):', pmData.roles?.includes('admin'));
    console.log('- pmData.roles?.includes("pm"):', pmData.roles?.includes('pm'));
    console.log('- –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç isUserPM:', isUserPM);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    const tasksSnapshot = await db.collection('projects').doc(project.id).collection('tasks').get();
    console.log(`\nüìù –ó–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${tasksSnapshot.size}`);

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    const columnsSnapshot = await db.collection('projects').doc(project.id).collection('columns').get();
    console.log(`üìä –ö–æ–ª–æ–Ω–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${columnsSnapshot.size}`);

    if (!columnsSnapshot.empty) {
      console.log('–ö–æ–ª–æ–Ω–∫–∏:');
      columnsSnapshot.docs.forEach(doc => {
        const columnData = doc.data();
        console.log(`  - ${columnData.name} (order: ${columnData.order})`);
      });
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...');
    const teamsSnapshot = await db.collection('teams').get();
    console.log(`–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤ —Å–∏—Å—Ç–µ–º–µ: ${teamsSnapshot.size}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –≥–¥–µ PM —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ –ª–∏–¥–µ—Ä–æ–º
    let pmTeams = 0;
    teamsSnapshot.docs.forEach(doc => {
      const teamData = doc.data();
      const isPMInTeam = teamData.teamLead === pmUser.id ||
                        teamData.pm === pmUser.id ||
                        (Array.isArray(teamData.members) && teamData.members.includes(pmUser.id)) ||
                        (Array.isArray(teamData.memberIds) && teamData.memberIds.includes(pmUser.id)) ||
                        (teamData.members && typeof teamData.members === 'object' && teamData.members[pmUser.id]);
      
      if (isPMInTeam) {
        pmTeams++;
        console.log(`  ‚úÖ PM –≤ –∫–æ–º–∞–Ω–¥–µ: ${teamData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: ${doc.id})`);
      }
    });

    console.log(`\nüìä PM —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ ${pmTeams} –∫–æ–º–∞–Ω–¥–∞—Ö`);

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const invitationsSnapshot = await db.collection('team_invitations').where('senderId', '==', pmUser.id).get();
    console.log(`üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π PM: ${invitationsSnapshot.size}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

debugPMAccess(); 