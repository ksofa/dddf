const { db, auth } = require('../src/config/firebase');
const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000/api';

async function generateAdminToken() {
  try {
    // ID –∞–¥–º–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const adminUid = 'ixClpAfDIoQQR0X8Zja8N7SM4gz2';
    const customToken = await auth.createCustomToken(adminUid);
    return customToken;
  } catch (error) {
    console.error('Error generating admin token:', error);
    throw error;
  }
}

async function findPendingApplication() {
  try {
    const applicationsSnapshot = await db.collection('applications')
      .where('status', '==', 'pending')
      .limit(1)
      .get();
    
    if (applicationsSnapshot.empty) {
      console.log('‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending');
      return null;
    }
    
    const doc = applicationsSnapshot.docs[0];
    return { id: doc.id, ...doc.data() };
  } catch (error) {
    console.error('Error finding pending application:', error);
    return null;
  }
}

async function findProjectManager() {
  try {
    const usersSnapshot = await db.collection('users')
      .where('roles', 'array-contains', 'pm')
      .limit(1)
      .get();
    
    if (usersSnapshot.empty) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é PM');
      return null;
    }
    
    const doc = usersSnapshot.docs[0];
    return { id: doc.id, ...doc.data() };
  } catch (error) {
    console.error('Error finding PM:', error);
    return null;
  }
}

async function testSimpleRequest(token) {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API...');
    const response = await fetch(`${API_BASE}/applications`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (response.ok) {
      const applications = await response.json();
      console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –∑–∞—è–≤–æ–∫:', applications.length);
      return true;
    } else {
      const error = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return false;
  }
}

async function testPMAssignment() {
  try {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞...');
    const adminToken = await generateAdminToken();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const simpleRequestOk = await testSimpleRequest(adminToken);
    if (!simpleRequestOk) {
      console.log('‚ùå –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
      return;
    }

    console.log('üîÑ –ò—â–µ–º –∑–∞—è–≤–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending...');
    const application = await findPendingApplication();
    if (!application) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', application.id, '-', application.projectTitle);

    console.log('üîÑ –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞...');
    const pm = await findProjectManager();
    if (!pm) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ PM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω PM:', pm.id, '-', pm.displayName);
    console.log('üîç PM –¥–∞–Ω–Ω—ã–µ:', { id: pm.id, uid: pm.uid, roles: pm.roles });

    const pmId = pm.uid || pm.id;
    console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º pmId:', pmId);

    console.log('üîÑ –ù–∞–∑–Ω–∞—á–∞–µ–º PM –∫ –∑–∞—è–≤–∫–µ...');
    const requestBody = { pmId: pmId };
    console.log('üîç –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody));
    
    const response = await fetch(`${API_BASE}/applications/${application.id}/approve`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!');
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
      const updatedApp = await db.collection('applications').doc(application.id).get();
      if (updatedApp.exists) {
        const data = updatedApp.data();
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞:');
        console.log('  - –°—Ç–∞—Ç—É—Å:', data.status);
        console.log('  - –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π PM:', data.assignedPM);
        console.log('  - ID –ø—Ä–æ–µ–∫—Ç–∞:', data.projectId);
      }
    } else {
      const error = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ PM:', error);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è PM –∫ –∑–∞—è–≤–∫–µ...\n');
  
  await testPMAssignment();
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  process.exit(0);
}

main().catch(console.error); 