const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const PM_USER = {
  email: 'pm@test.test',
  password: 'password123'
};

const EXECUTOR_USER = {
  email: 'executor5@test.test', 
  password: 'password123'
};

async function login(email, password) {
  try {
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email,
      password
    });
    return response.data.token;
  } catch (error) {
    console.error(`Login failed for ${email}:`, error.response?.data || error.message);
    throw error;
  }
}

async function testInvitationSystemEndToEnd() {
  console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...\n');

  try {
    // 1. –õ–æ–≥–∏–Ω PM
    console.log('1Ô∏è‚É£ –õ–æ–≥–∏–Ω PM...');
    const pmToken = await login(PM_USER.email, PM_USER.password);
    console.log('‚úÖ PM –∑–∞–ª–æ–≥–∏–Ω–µ–Ω');

    // 2. –õ–æ–≥–∏–Ω Executor
    console.log('\n2Ô∏è‚É£ –õ–æ–≥–∏–Ω Executor...');
    const executorToken = await login(EXECUTOR_USER.email, EXECUTOR_USER.password);
    console.log('‚úÖ Executor –∑–∞–ª–æ–≥–∏–Ω–µ–Ω');

    // 3. PM –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã
    console.log('\n3Ô∏è‚É£ PM –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...');
    const pmTeamsResponse = await axios.get(`${BASE_URL}/teams`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${pmTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    
    if (pmTeamsResponse.data.length === 0) {
      console.log('‚ùå PM –Ω–µ –≤–∏–¥–∏—Ç –∫–æ–º–∞–Ω–¥ - —Ç–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è');
      return;
    }

    const testTeam = pmTeamsResponse.data[0];
    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É: "${testTeam.name}" (ID: ${testTeam.id})`);

    // 4. Executor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã –î–û –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    console.log('\n4Ô∏è‚É£ Executor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –î–û –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...');
    const executorTeamsBefore = await axios.get(`${BASE_URL}/teams`, {
      headers: { Authorization: `Bearer ${executorToken}` }
    });
    console.log(`üìä Executor –≤–∏–¥–∏—Ç ${executorTeamsBefore.data.length} –∫–æ–º–∞–Ω–¥ –î–û –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è`);

    // 5. Executor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\n5Ô∏è‚É£ Executor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏...');
    const invitationsBefore = await axios.get(`${BASE_URL}/invitations?status=pending`, {
      headers: { Authorization: `Bearer ${executorToken}` }
    });
    console.log(`üì® Executor –∏–º–µ–µ—Ç ${invitationsBefore.data.length} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏`);

    // 6. PM –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    console.log('\n6Ô∏è‚É£ PM –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ...');
    const invitationData = {
      receiverId: 'QH040Apx3segNZ9zHJrLP8y4UPD2', // executor5@test.test
      projectType: 'with_project',
      rate: '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è',
      startDate: '2025-06-01',
      estimatedDuration: '3',
      estimatedDurationUnit: 'months',
      coverLetter: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º!'
    };

    const inviteResponse = await axios.post(`${BASE_URL}/teams/${testTeam.id}/invite-simple`, invitationData, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    
    console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', inviteResponse.data.message);

    // 7. Executor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\n7Ô∏è‚É£ Executor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏...');
    const invitationsAfter = await axios.get(`${BASE_URL}/invitations?status=pending`, {
      headers: { Authorization: `Bearer ${executorToken}` }
    });
    console.log(`üì® Executor –∏–º–µ–µ—Ç ${invitationsAfter.data.length} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏`);
    
    if (invitationsAfter.data.length > invitationsBefore.data.length) {
      console.log('‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ!');
      const newInvitation = invitationsAfter.data.find(inv => 
        inv.teamId === testTeam.id && inv.status === 'pending'
      );
      if (newInvitation) {
        console.log(`üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:`);
        console.log(`   - –ö–æ–º–∞–Ω–¥–∞: ${newInvitation.teamName}`);
        console.log(`   - –û—Ç: ${newInvitation.senderName}`);
        console.log(`   - –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${newInvitation.projectType}`);
        console.log(`   - –°—Ç–∞–≤–∫–∞: ${newInvitation.rate}`);
      }
    } else {
      console.log('‚ùå –ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ù–ï –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ');
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    try {
      const notificationsResponse = await axios.get(`${BASE_URL}/notifications`, {
        headers: { Authorization: `Bearer ${executorToken}` }
      });
      console.log(`üîî Executor –∏–º–µ–µ—Ç ${notificationsResponse.data.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      
      const teamInviteNotifications = notificationsResponse.data.filter(n => 
        n.type === 'team_invitation' && !n.read
      );
      console.log(`üì® –ò–∑ –Ω–∏—Ö ${teamInviteNotifications.length} - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã`);
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.response?.status);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìä –ò—Ç–æ–≥–∏:');
    console.log(`   - PM –∫–æ–º–∞–Ω–¥: ${pmTeamsResponse.data.length}`);
    console.log(`   - Executor –∫–æ–º–∞–Ω–¥ –î–û: ${executorTeamsBefore.data.length}`);
    console.log(`   - Executor –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –î–û: ${invitationsBefore.data.length}`);
    console.log(`   - Executor –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ü–û–°–õ–ï: ${invitationsAfter.data.length}`);
    console.log(`   - –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ‚úÖ`);
    console.log(`   - –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: ${invitationsAfter.data.length > invitationsBefore.data.length ? '‚úÖ' : '‚ùå'}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP Status: ${error.response.status}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testInvitationSystemEndToEnd(); 