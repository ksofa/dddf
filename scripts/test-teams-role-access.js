const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const PM_USER = {
  email: 'pm@test.test',
  password: 'password123'
};

const EXECUTOR_USER = {
  email: 'executor5@test.test', 
  password: 'password123'
};

const ADMIN_USER = {
  email: 'admin@admin.admin',
  password: 'password123'
};

async function login(email, password) {
  try {
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email,
      password
    });
    return response.data.token;
  } catch (error) {
    console.error(`Login failed for ${email}:`, error.response?.data || error.message);
    throw error;
  }
}

async function testTeamsRoleAccess() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –ø–æ —Ä–æ–ª—è–º...\n');

  try {
    // 1. –¢–µ—Å—Ç –¥–ª—è PM
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ PM...');
    const pmToken = await login(PM_USER.email, PM_USER.password);
    
    const pmTeamsResponse = await axios.get(`${BASE_URL}/teams`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    
    console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${pmTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥(—ã)`);
    pmTeamsResponse.data.forEach(team => {
      console.log(`   - ${team.name} (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members?.length || 0})`);
    });
    console.log();

    // 2. –¢–µ—Å—Ç –¥–ª—è Executor
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ Executor...');
    const executorToken = await login(EXECUTOR_USER.email, EXECUTOR_USER.password);
    
    const executorTeamsResponse = await axios.get(`${BASE_URL}/teams`, {
      headers: { Authorization: `Bearer ${executorToken}` }
    });
    
    console.log(`‚úÖ Executor –≤–∏–¥–∏—Ç ${executorTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥(—ã)`);
    executorTeamsResponse.data.forEach(team => {
      console.log(`   - ${team.name} (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members?.length || 0})`);
    });
    console.log();

    // 3. –¢–µ—Å—Ç –¥–ª—è Admin
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ Admin...');
    const adminToken = await login(ADMIN_USER.email, ADMIN_USER.password);
    
    const adminTeamsResponse = await axios.get(`${BASE_URL}/teams`, {
      headers: { Authorization: `Bearer ${adminToken}` }
    });
    
    console.log(`‚úÖ Admin –≤–∏–¥–∏—Ç ${adminTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥(—ã)`);
    adminTeamsResponse.data.forEach(team => {
      console.log(`   - ${team.name} (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members?.length || 0})`);
    });
    console.log();

    // 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞:');
    console.log(`   PM: ${pmTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    console.log(`   Executor: ${executorTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    console.log(`   Admin: ${adminTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
    if (adminTeamsResponse.data.length >= pmTeamsResponse.data.length) {
      console.log('‚úÖ Admin –≤–∏–¥–∏—Ç –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–º–∞–Ω–¥, —á–µ–º PM - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ùå Admin –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥, —á–µ–º PM');
    }
    
    if (executorTeamsResponse.data.length <= pmTeamsResponse.data.length) {
      console.log('‚úÖ Executor –≤–∏–¥–∏—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–º–∞–Ω–¥, —á–µ–º PM - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ùå Executor –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥, —á–µ–º PM');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP Status: ${error.response.status}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testTeamsRoleAccess(); 