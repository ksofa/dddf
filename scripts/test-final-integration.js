const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

// PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const PM_EMAIL = 'pm@mail.ru';
const PM_PASSWORD = '123456';

async function testFinalIntegration() {
  try {
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...\n');

    // 1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: PM_EMAIL,
      password: PM_PASSWORD
    });

    const { token, user } = loginResponse.data;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è:', {
      uid: user.uid,
      email: user.email,
      roles: user.roles
    });

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get(`${API_BASE}/projects`, { headers });
    const projects = projectsResponse.data;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    
    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testProject = projects[0];
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', {
      id: testProject.id,
      title: testProject.title,
      pmId: testProject.pmId,
      manager: testProject.manager
    });

    // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    console.log('\n3. –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–µ–∫—Ç–∞ (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç getProjectTeam)
    const teamResponse = await axios.get(`${API_BASE}/projects/${testProject.id}/team`, { headers });
    const teamData = teamResponse.data;
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω—ã:', {
      projectId: teamData.projectId,
      teamMembersCount: teamData.teamMembers.length,
      canManage: teamData.canManage
    });

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ProjectTeamScreen
    const isPM = user.roles?.includes('pm') || user.roles?.includes('project_manager') || user.role === 'pm';
    const isProjectManager = teamData && user && (
      teamData.canManage || // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç canManage
      user.roles?.includes('admin')
    );
    const canInvite = isPM && isProjectManager;

    console.log('üîç –õ–æ–≥–∏–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (ProjectTeamScreen):', {
      userId: user.uid,
      userRoles: user.roles,
      isPM,
      isProjectManager,
      canInvite,
      canManageFromAPI: teamData.canManage
    });

    if (!canInvite) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ù–ï –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è!');
      console.log('üîç –ü—Ä–∏—á–∏–Ω—ã:');
      console.log(`   - isPM: ${isPM} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true)`);
      console.log(`   - isProjectManager: ${isProjectManager} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true)`);
      console.log(`   - canManage from API: ${teamData.canManage} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true)`);
      console.log(`   - pmId match: ${testProject.pmId === user.uid} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true)`);
      return;
    }

    console.log('‚úÖ –£–°–ü–ï–•: –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ë–£–î–ï–¢ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è!');

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç getAvailableExecutors)
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...');
    const executorsResponse = await axios.get(`${API_BASE}/users/executors/search`, { headers });
    const executors = executorsResponse.data;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${executors.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
    const teamMemberIds = teamData.teamMembers?.map(member => member.id) || [];
    const filteredExecutors = executors.filter(executor => 
      !teamMemberIds.includes(executor.id)
    );

    console.log(`‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredExecutors.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è`);

    if (filteredExecutors.length > 0) {
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:');
      filteredExecutors.slice(0, 3).forEach((executor, index) => {
        console.log(`   ${index + 1}. ${executor.name} (${executor.email}) - ${executor.specialization}`);
      });

      // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç sendInvitationToExecutor)
      const testExecutor = filteredExecutors[0];
      console.log(`\n5. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: ${testExecutor.name}...`);
      
      const inviteResponse = await axios.post(`${API_BASE}/projects/${testProject.id}/invite`, {
        executorId: testExecutor.id,
        message: '–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç'
      }, { headers });
      
      console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', inviteResponse.data);

      // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–ª–æ—Å—å
      console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...');
      try {
        const invitationsResponse = await axios.get(`${API_BASE}/invitations?status=pending`, { headers });
        const invitations = invitationsResponse.data;
        
        const ourInvitation = invitations.find(inv => 
          inv.projectId === testProject.id && 
          inv.executorId === testExecutor.id
        );

        if (ourInvitation) {
          console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', {
            id: ourInvitation.id,
            status: ourInvitation.status,
            executorName: ourInvitation.executorName,
            projectTitle: ourInvitation.projectTitle
          });
        } else {
          console.log('‚ö†Ô∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error.response?.status);
      }

    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–≤—Å–µ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ)');
    }

    console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ –í—Å–µ API endpoint\'—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–ª—è PM');
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    console.log('\nüìã –ß—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ:');
    console.log('1. PM –≤–∏–¥–∏—Ç –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('2. –ü—Ä–∏ –∫–ª–∏–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π');
    console.log('3. PM –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
    console.log('4. –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('5. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    
    if (error.response?.status === 403) {
      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ 403:');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. PM –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞');
      console.log('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π');
      console.log('3. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }
}

testFinalIntegration(); 