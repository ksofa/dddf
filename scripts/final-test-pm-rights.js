const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function finalTestPMRights() {
  try {
    console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–ê–í PM\n');

    // 1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });

    const { token, user } = loginResponse.data;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è:', {
      uid: user.uid,
      email: user.email,
      roles: user.roles
    });

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get(`${BASE_URL}/api/projects`, { headers });
    const projects = projectsResponse.data;
    
    console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    
    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç PM
    let allProjectsBelongToPM = true;
    projects.forEach((project, index) => {
      const belongsToPM = project.pmId === user.uid;
      console.log(`   –ü—Ä–æ–µ–∫—Ç ${index + 1}: ${project.title} - ${belongsToPM ? '‚úÖ' : '‚ùå'} (pmId: ${project.pmId})`);
      if (!belongsToPM) allProjectsBelongToPM = false;
    });

    if (allProjectsBelongToPM) {
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç PM');
    } else {
      console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ PM');
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–∞–∂–¥–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á...');
    
    for (let i = 0; i < Math.min(3, projects.length); i++) {
      const project = projects[i];
      console.log(`\n   –ü—Ä–æ–µ–∫—Ç: ${project.title}`);
      
      try {
        const taskData = {
          text: `–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ${i + 1} –æ—Ç PM`,
          column: 'todo',
          status: 'todo',
          priority: 'medium',
          description: `–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤ PM –≤ –ø—Ä–æ–µ–∫—Ç–µ ${project.title}`
        };

        const createTaskResponse = await axios.post(
          `${BASE_URL}/api/projects/${project.id}/tasks`,
          taskData,
          { headers }
        );

        console.log(`   ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${createTaskResponse.data.taskId}`);
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.response?.data?.message || error.message}`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const testProject = projects[0];
    
    try {
      const teamResponse = await axios.get(`${BASE_URL}/api/projects/${testProject.id}/team`, { headers });
      const teamData = teamResponse.data;
      
      console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω');
      console.log(`   –ü—Ä–æ–µ–∫—Ç: ${teamData.projectTitle}`);
      console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: ${teamData.teamMembers.length}`);
      console.log(`   –ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å: ${teamData.canManage ? '‚úÖ' : '‚ùå'}`);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ: ${error.response?.data?.message || error.message}`);
    }

    // 5. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ PM –º–æ–∂–µ—Ç –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è');
    console.log('‚úÖ PM –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã');
    console.log('‚úÖ PM –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏');
    console.log('‚úÖ PM –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥–æ–π');
    console.log('\nüöÄ –í—Å–µ –ø—Ä–∞–≤–∞ PM —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error.response?.data || error.message);
  }
}

finalTestPMRights(); 