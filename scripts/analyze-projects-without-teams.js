// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥
const { db } = require('../src/config/firebase');

async function analyzeProjectsWithoutTeams() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectsSnapshot = await db.collection('projects').get();
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsSnapshot.size}\n`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥...');
    const teamsSnapshot = await db.collection('teams').get();
    console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${teamsSnapshot.size}\n`);
    
    // 3. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫–æ–º–∞–Ω–¥ –ø–æ projectId
    const teamsByProject = {};
    for (const doc of teamsSnapshot.docs) {
      const teamData = doc.data();
      if (teamData.projectId) {
        teamsByProject[teamData.projectId] = {
          id: doc.id,
          name: teamData.name,
          pmId: teamData.pmId
        };
      }
    }
    
    console.log('3Ô∏è‚É£ –ö–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º:');
    Object.entries(teamsByProject).forEach(([projectId, team]) => {
      console.log(`   üìã –ü—Ä–æ–µ–∫—Ç ${projectId} -> –ö–æ–º–∞–Ω–¥–∞ "${team.name}" (${team.id})`);
    });
    console.log();
    
    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥
    console.log('4Ô∏è‚É£ –ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥:');
    const projectsWithoutTeams = [];
    
    for (const doc of projectsSnapshot.docs) {
      const projectData = { id: doc.id, ...doc.data() };
      
      if (!teamsByProject[doc.id]) {
        projectsWithoutTeams.push(projectData);
        
        console.log(`\nüìã –ü—Ä–æ–µ–∫—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã: ${projectData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        console.log(`   ID: ${doc.id}`);
        console.log(`   PM: ${projectData.pmId || projectData.manager || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${projectData.createdAt ? new Date(projectData.createdAt.seconds * 1000).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º PM
        const pmId = projectData.pmId || projectData.manager;
        if (pmId) {
          try {
            const pmDoc = await db.collection('users').doc(pmId).get();
            if (pmDoc.exists) {
              const pmData = pmDoc.data();
              console.log(`   PM –¥–∞–Ω–Ω—ã–µ: ${pmData.fullName || pmData.displayName || pmData.email} (${pmData.email})`);
            } else {
              console.log(`   ‚ö†Ô∏è PM –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            }
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PM: ${error.message}`);
          }
        }
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsSnapshot.size}`);
    console.log(`   –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: ${Object.keys(teamsByProject).length}`);
    console.log(`   –ü—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥: ${projectsWithoutTeams.length}`);
    
    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n5Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (projectsWithoutTeams.length > 0) {
      console.log(`‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è ${projectsWithoutTeams.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å PM –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ PM –∫–æ–º–∞–Ω–¥—ã');
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    } else {
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–º–∞–Ω–¥—ã');
    }
    
    return projectsWithoutTeams;
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
    return [];
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
if (require.main === module) {
  analyzeProjectsWithoutTeams().then(() => {
    process.exit(0);
  }).catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { analyzeProjectsWithoutTeams }; 