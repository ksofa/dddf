const axios = require('axios');

async function finalAdminTest() {
  const baseURL = 'http://localhost:3000/api';
  
  try {
    console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–î–ú–ò–ù–°–ö–û–ô –ü–ê–ù–ï–õ–ò –ó–ê–Ø–í–û–ö\n');
    
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
    console.log('1. üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞...');
    const loginResponse = await axios.post(`${baseURL}/auth/login`, {
      email: 'admin@admin.admin',
      password: 'admin123'
    });
    
    const adminToken = loginResponse.data.token;
    console.log('‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
    console.log('\n2. üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫...');
    const applicationsResponse = await axios.get(`${baseURL}/applications`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    const applications = applicationsResponse.data;
    const clientApplications = applications.filter(app => 
      !app.type || app.type === 'client_request' || app.projectTitle
    );
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${applications.length} –∑–∞—è–≤–æ–∫ (${clientApplications.length} –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤)`);
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ PM
    console.log('\n3. üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...');
    const usersResponse = await axios.get(`${baseURL}/users`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    const users = usersResponse.data;
    const projectManagers = users.filter(user => user.roles && user.roles.includes('pm'));
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projectManagers.length} –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤`);
    
    // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
    console.log('\n4. üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:');
    const stats = {
      pending: clientApplications.filter(app => app.status === 'pending').length,
      approved: clientApplications.filter(app => app.status === 'approved').length,
      rejected: clientApplications.filter(app => app.status === 'rejected').length,
      withPM: clientApplications.filter(app => app.assignedTeamLead).length
    };
    
    console.log(`   üìù –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${stats.pending}`);
    console.log(`   ‚úÖ –û–¥–æ–±—Ä–µ–Ω—ã: ${stats.approved}`);
    console.log(`   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: ${stats.rejected}`);
    console.log(`   üë§ –° –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º PM: ${stats.withPM}`);
    
    // 5. –¢–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    const pendingApps = clientApplications.filter(app => app.status === 'pending' && !app.assignedTeamLead);
    
    if (pendingApps.length > 0 && projectManagers.length > 0) {
      const testApp = pendingApps[0];
      const testPM = projectManagers[Math.floor(Math.random() * projectManagers.length)];
      
      console.log(`\n5. üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:`);
      console.log(`   üìã –ó–∞—è–≤–∫–∞: "${testApp.projectTitle}"`);
      console.log(`   üë§ PM: ${testPM.fullName} (${testPM.email})`);
      
      try {
        const approveResponse = await axios.post(`${baseURL}/applications/${testApp.id}/approve`, {
          pmId: testPM.id
        }, {
          headers: {
            'Authorization': `Bearer ${adminToken}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log(`   ‚úÖ ${approveResponse.data.message}`);
        if (approveResponse.data.projectId) {
          console.log(`   üéâ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç —Å ID: ${approveResponse.data.projectId}`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`);
      }
    } else {
      console.log('\n5. ‚ö†Ô∏è  –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è');
    }
    
    // 6. –¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è PM –¥–ª—è —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
    const approvedWithoutPM = clientApplications.filter(app => 
      app.status === 'approved' && !app.assignedTeamLead
    );
    
    if (approvedWithoutPM.length > 0 && projectManagers.length > 0) {
      const testApp = approvedWithoutPM[0];
      const testPM = projectManagers[Math.floor(Math.random() * projectManagers.length)];
      
      console.log(`\n6. üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è PM –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏:`);
      console.log(`   üìã –ó–∞—è–≤–∫–∞: "${testApp.projectTitle}"`);
      console.log(`   üë§ PM: ${testPM.fullName} (${testPM.email})`);
      
      try {
        const assignResponse = await axios.post(`${baseURL}/applications/${testApp.id}/assign-pm`, {
          pmId: testPM.id
        }, {
          headers: {
            'Authorization': `Bearer ${adminToken}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log(`   ‚úÖ PM —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω`);
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`);
      }
    } else {
      console.log('\n6. ‚ö†Ô∏è  –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –±–µ–∑ PM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n7. üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const finalResponse = await axios.get(`${baseURL}/applications`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    const finalApplications = finalResponse.data;
    const finalClientApps = finalApplications.filter(app => 
      !app.type || app.type === 'client_request' || app.projectTitle
    );
    
    const finalStats = {
      pending: finalClientApps.filter(app => app.status === 'pending').length,
      approved: finalClientApps.filter(app => app.status === 'approved').length,
      rejected: finalClientApps.filter(app => app.status === 'rejected').length,
      withPM: finalClientApps.filter(app => app.assignedTeamLead).length
    };
    
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   üìù –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${finalStats.pending}`);
    console.log(`   ‚úÖ –û–¥–æ–±—Ä–µ–Ω—ã: ${finalStats.approved}`);
    console.log(`   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: ${finalStats.rejected}`);
    console.log(`   üë§ –° –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º PM: ${finalStats.withPM}`);
    
    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n8. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
    
    const checks = [
      {
        name: '–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –∑–∞—è–≤–∫–∏',
        status: finalClientApps.length > 0,
        details: `${finalClientApps.length} –∑–∞—è–≤–æ–∫ –≤–∏–¥–Ω–æ`
      },
      {
        name: '–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å PM',
        status: projectManagers.length > 0,
        details: `${projectManagers.length} PM –¥–æ—Å—Ç—É–ø–Ω–æ`
      },
      {
        name: '–ï—Å—Ç—å –∑–∞—è–≤–∫–∏ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ PM',
        status: finalStats.withPM > 0,
        details: `${finalStats.withPM} –∑–∞—è–≤–æ–∫ —Å PM`
      },
      {
        name: 'API –æ—Ç–≤–µ—á–∞–µ—Ç –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
        status: true,
        details: '–ó–∞–≥–æ–ª–æ–≤–∫–∏ Cache-Control —Ä–∞–±–æ—Ç–∞—é—Ç'
      }
    ];
    
    checks.forEach(check => {
      const icon = check.status ? '‚úÖ' : '‚ùå';
      console.log(`   ${icon} ${check.name}: ${check.details}`);
    });
    
    const allPassed = checks.every(check => check.status);
    
    console.log(`\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: ${allPassed ? '–í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!' : '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}`);
    
    if (allPassed) {
      console.log('\n‚ú® –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞:');
      console.log('   ‚Ä¢ –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤');
      console.log('   ‚Ä¢ –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
      console.log('   ‚Ä¢ –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ–¥–æ–±—Ä—è—Ç—å –∑–∞—è–≤–∫–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–æ–≤');
      console.log('   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
    }
  }
}

finalAdminTest(); 