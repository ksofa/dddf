const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function testPMTeamsAPI() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM
    const loginResponse = await axios.post(`${API_BASE}/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ PM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ PM...');
    const teamsResponse = await axios.get(`${API_BASE}/teams`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const teams = teamsResponse.data;
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);
    
    teams.forEach((team, index) => {
      console.log(`\n–ö–æ–º–∞–Ω–¥–∞ ${index + 1}:`);
      console.log(`  ID: ${team.id}`);
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${team.name}`);
      console.log(`  –ü—Ä–æ–µ–∫—Ç ID: ${team.projectId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`  PM ID: ${team.pmId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`  –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members ? team.members.length : 0}`);
      
      if (team.members && team.members.length > 0) {
        console.log('  –£—á–∞—Å—Ç–Ω–∏–∫–∏:');
        team.members.forEach(member => {
          console.log(`    - ${member.name || member.email} (${member.role || 'member'})`);
        });
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    if (teams.length > 0) {
      console.log(`\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "${teams[0].name}"...`);
      
      try {
        const availableUsersResponse = await axios.get(`${API_BASE}/teams/${teams[0].id}/available-users`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const availableUsers = availableUsersResponse.data;
        console.log(`–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${availableUsers.length}`);
        
        if (availableUsers.length > 0) {
          console.log('–ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
          availableUsers.slice(0, 3).forEach(user => {
            console.log(`  - ${user.fullName || user.displayName || user.email} (${user.profession || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})`);
          });
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.response?.data?.error || error.message}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

testPMTeamsAPI().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 