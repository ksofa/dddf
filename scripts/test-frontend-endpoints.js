const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

// PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const PM_EMAIL = 'pm@mail.ru';
const PM_PASSWORD = '123456';

async function testFrontendEndpoints() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö endpoint\'–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...\n');

    // 1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: PM_EMAIL,
      password: PM_PASSWORD
    });

    const { token, user } = loginResponse.data;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è:', {
      uid: user.uid,
      email: user.email,
      roles: user.roles
    });

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get(`${API_BASE}/projects`, { headers });
    const projects = projectsResponse.data;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    
    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testProject = projects[0];
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', {
      id: testProject.id,
      title: testProject.title
    });

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º getProjectTeam endpoint
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getProjectTeam: /api/projects/:projectId/team...');
    try {
      const teamResponse = await axios.get(`${API_BASE}/projects/${testProject.id}/team`, { headers });
      const teamData = teamResponse.data;
      
      console.log('‚úÖ getProjectTeam —Ä–∞–±–æ—Ç–∞–µ—Ç:', {
        projectId: teamData.projectId,
        teamMembersCount: teamData.teamMembers.length,
        canManage: teamData.canManage
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      const isPM = user.roles?.includes('pm') || user.roles?.includes('project_manager');
      const canInvite = isPM && teamData.canManage;
      
      console.log('üîç –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', {
        isPM,
        canManage: teamData.canManage,
        canInvite
      });

      if (!canInvite) {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ù–ï –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è!');
        return;
      } else {
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –î–û–õ–ñ–ù–ê –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è!');
      }

    } catch (error) {
      console.log('‚ùå getProjectTeam –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response?.status, error.response?.data?.error);
      return;
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º getAvailableExecutors endpoint (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getAvailableExecutors: /api/users/executors/search...');
    try {
      const executorsResponse = await axios.get(`${API_BASE}/users/executors/search`, { headers });
      const executors = executorsResponse.data;
      
      console.log(`‚úÖ getAvailableExecutors —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ ${executors.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);
      
      if (executors.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ 3 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:');
        executors.slice(0, 3).forEach((executor, index) => {
          console.log(`   ${index + 1}. ${executor.name} (${executor.email})`);
        });
      }

    } catch (error) {
      console.log('‚ùå getAvailableExecutors –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response?.status, error.response?.data?.error);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º sendInvitationToExecutor endpoint
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sendInvitationToExecutor: /api/projects/:projectId/invite...');
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const executorsResponse = await axios.get(`${API_BASE}/users/executors/search`, { headers });
      const executors = executorsResponse.data;
      
      if (executors.length > 0) {
        const testExecutor = executors[0];
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: ${testExecutor.name}...`);
        
        const inviteResponse = await axios.post(`${API_BASE}/projects/${testProject.id}/invite`, {
          executorId: testExecutor.id,
          message: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API'
        }, { headers });
        
        console.log('‚úÖ sendInvitationToExecutor —Ä–∞–±–æ—Ç–∞–µ—Ç:', inviteResponse.data);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
      }

    } catch (error) {
      console.log('‚ùå sendInvitationToExecutor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response?.status, error.response?.data?.error);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π endpoint (–∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–ª)
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ endpoint: /api/executors/search...');
    try {
      const oldExecutorsResponse = await axios.get(`${API_BASE}/executors/search`, { headers });
      console.log('‚ö†Ô∏è –°—Ç–∞—Ä—ã–π endpoint –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)');
    } catch (error) {
      console.log('‚úÖ –°—Ç–∞—Ä—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å):', error.response?.status);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—é–º–µ:');
    console.log('- getProjectTeam: –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å canManage: true');
    console.log('- getAvailableExecutors: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint');
    console.log('- sendInvitationToExecutor: –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏: isPM && canManage = –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
  }
}

testFrontendEndpoints(); 