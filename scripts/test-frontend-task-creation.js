const axios = require('axios');

async function testFrontendTaskCreation() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM
    const loginResponse = await axios.post('http://localhost:3000/api/login', {
      email: 'pm@test.test',
      password: 'password123'
    });

    const token = loginResponse.data.token;
    console.log('‚úÖ PM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get('http://localhost:3000/api/projects', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    const projects = projectsResponse.data;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const project = projects[0];
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${project.title} (${project.id})`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∞–º –¥–æ—Å–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∞–º –¥–æ—Å–∫–∏...');
    const boardResponse = await axios.get(`http://localhost:3000/api/projects/${project.id}/tasks`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    const tasks = boardResponse.data;
    console.log(`üìä –ó–∞–¥–∞—á –Ω–∞ –¥–æ—Å–∫–µ: ${tasks.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const tasksByStatus = tasks.reduce((acc, task) => {
      const status = task.status || 'todo';
      if (!acc[status]) acc[status] = [];
      acc[status].push(task);
      return acc;
    }, {});

    console.log('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º:');
    Object.entries(tasksByStatus).forEach(([status, tasks]) => {
      console.log(`  ${status}: ${tasks.length} –∑–∞–¥–∞—á`);
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API...');
    const newTaskData = {
      text: '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API',
      column: 'todo',
      status: 'todo',
      priority: 'high',
      color: '#3B82F6',
      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
    };

    const createTaskResponse = await axios.post(
      `http://localhost:3000/api/projects/${project.id}/tasks`,
      newTaskData,
      {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API!');
    console.log('üìù ID –∑–∞–¥–∞—á–∏:', createTaskResponse.data.taskId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –¥–æ—Å–∫—É
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –¥–æ—Å–∫–∏...');
    const updatedBoardResponse = await axios.get(`http://localhost:3000/api/projects/${project.id}/tasks`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    const updatedTasks = updatedBoardResponse.data;
    console.log(`üìä –ó–∞–¥–∞—á –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${updatedTasks.length}`);

    // –ù–∞–π–¥–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    const createdTask = updatedTasks.find(task => task.id === createTaskResponse.data.taskId);
    if (createdTask) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ');
      console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', {
        id: createdTask.id,
        text: createdTask.text,
        status: createdTask.status,
        priority: createdTask.priority,
        color: createdTask.color
      });
    } else {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã...');
    try {
      const teamResponse = await axios.get(`http://localhost:3000/api/users`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const users = teamResponse.data;
      console.log(`üë• –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      
      if (users.length > 0) {
        console.log('üë§ –ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        users.slice(0, 3).forEach(user => {
          console.log(`  - ${user.displayName || user.name} (${user.email})`);
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.response?.data?.message || error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ PM –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Å–∫—Ä–∞–º –¥–æ—Å–∫–µ');
    console.log('‚úÖ –ó–∞–¥–∞—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –¥–æ—Å–∫–µ');
    console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    if (error.response) {
      console.log('HTTP —Å—Ç–∞—Ç—É—Å:', error.response.status);
    }
  }
}

testFrontendTaskCreation(); 