const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

async function testFrontendTaskCreation() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API...\n');

    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'pm@mail.ru',
      password: '123456'
    });

    const token = loginResponse.data.token;
    const pmUser = loginResponse.data.user;
    console.log('‚úÖ PM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', pmUser.email);

    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM
    const projectsResponse = await axios.get(`${API_BASE_URL}/projects`, { headers });
    const projects = projectsResponse.data;
    
    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤');
      return;
    }

    const testProject = projects[0];
    console.log(`üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: ${testProject.title} (ID: ${testProject.id})`);

    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∫–∞–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API...');
    
    const taskData = {
      text: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç PM —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥',
      column: '–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å',
      status: 'todo',
      priority: 'medium',
      color: '#3B82F6',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API'
    };

    try {
      const createTaskResponse = await axios.post(
        `${API_BASE_URL}/projects/${testProject.id}/tasks`,
        taskData,
        { headers }
      );

      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API:', createTaskResponse.data);
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–∞ —Å–∫—Ä–∞–º –¥–æ—Å–∫–µ
      console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∞–º –¥–æ—Å–∫–∏...');
      const boardResponse = await axios.get(`${API_BASE_URL}/projects/${testProject.id}/board`, { headers });
      const boardData = boardResponse.data;
      
      if (boardData.board) {
        const columns = Object.keys(boardData.board);
        let totalTasks = 0;
        
        columns.forEach(column => {
          const tasks = boardData.board[column];
          totalTasks += tasks?.length || 0;
          if (tasks && tasks.length > 0) {
            console.log(`   - ${column}: ${tasks.length} –∑–∞–¥–∞—á`);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            const lastTask = tasks[tasks.length - 1];
            if (lastTask.text === taskData.text) {
              console.log(`     ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞: "${lastTask.text}"`);
            }
          }
        });
        
        console.log(`üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á –Ω–∞ –¥–æ—Å–∫–µ: ${totalTasks}`);
      }

      console.log('\nüéâ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ API —É—Å–ø–µ—à–µ–Ω!');
      console.log('üí° PM —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–∫—Ä–∞–º –¥–æ—Å–∫–µ!');

    } catch (taskError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskError.response?.data?.message || taskError.message);
      console.log('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', taskError.response?.data);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testFrontendTaskCreation(); 