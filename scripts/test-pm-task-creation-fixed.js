const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testPMTaskCreation() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á PM –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n');

    // 1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });

    const { token, user } = loginResponse.data;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è:', {
      uid: user.uid,
      email: user.email,
      roles: user.roles
    });

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get(`${BASE_URL}/api/projects`, { headers });
    const projects = projectsResponse.data;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è PM`);
    
    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const project = projects[0];
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${project.title} (ID: ${project.id})`);
    console.log(`   PM ID –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${project.pmId}`);
    console.log(`   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${project.pmId === user.uid}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      const boardResponse = await axios.get(`${BASE_URL}/api/projects/${project.id}/board`, { headers });
      console.log('‚úÖ –î–æ—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏:', error.response?.data || error.message);
    }

    // 4. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    console.log('\n4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
    const taskData = {
      text: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç PM (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)',
      column: 'todo',
      status: 'todo',
      priority: 'medium',
      description: '–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤ PM –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏'
    };

    try {
      const createTaskResponse = await axios.post(
        `${BASE_URL}/api/projects/${project.id}/tasks`,
        taskData,
        { headers }
      );

      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('Response:', createTaskResponse.data);
      
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–∞ –¥–æ—Å–∫–µ
      console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–æ—Å–∫–µ...');
      const updatedBoardResponse = await axios.get(`${BASE_URL}/api/projects/${project.id}/board`, { headers });
      const board = updatedBoardResponse.data;
      
      let taskFound = false;
      board.columns.forEach(column => {
        column.tasks.forEach(task => {
          if (task.text === taskData.text) {
            taskFound = true;
            console.log('‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ:', task.text);
          }
        });
      });
      
      if (!taskFound) {
        console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å–∫–µ');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.response?.data || error.message);
      if (error.response?.status === 403) {
        console.log('\nüîç –û—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏ 403...');
        console.log('Response data:', error.response.data);
        console.log('–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ PM –≤—Å–µ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á');
      }
    }

  } catch (error) {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error.response?.data || error.message);
  }
}

testPMTaskCreation(); 