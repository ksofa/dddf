const admin = require('firebase-admin');
require('dotenv').config();

// Initialize Firebase Admin
const serviceAccount = {
  projectId: process.env.FIREBASE_PROJECT_ID,
  privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  clientEmail: process.env.FIREBASE_CLIENT_EMAIL
};

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function fixFirestoreQueries() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Firestore –∑–∞–ø—Ä–æ—Å–æ–≤...\n');
    
    // –ò—Å–ø—Ä–∞–≤–∏—Ç—å routes/chats.js
    console.log('üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ src/routes/chats.js...');
    
    const fs = require('fs');
    const path = require('path');
    
    const chatsPath = path.join(__dirname, '..', 'src', 'routes', 'chats.js');
    let chatsContent = fs.readFileSync(chatsPath, 'utf8');
    
    // –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ chats.js
    const oldChatsQuery = `const chatsSnapshot = await db.collection('chats')
      .where('participants', 'array-contains', userId)
      .orderBy('updatedAt', 'desc')
      .get();`;
    
    const newChatsQuery = `// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    const chatsSnapshot = await db.collection('chats')
      .where('participants', 'array-contains', userId)
      .get();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
    const chatDocs = chatsSnapshot.docs.sort((a, b) => {
      const aTime = a.data().updatedAt?.toDate() || new Date(0);
      const bTime = b.data().updatedAt?.toDate() || new Date(0);
      return bTime - aTime;
    });`;
    
    if (chatsContent.includes('array-contains')) {
      chatsContent = chatsContent.replace(
        /const chatsSnapshot = await db\.collection\('chats'\)\s*\.where\('participants', 'array-contains', userId\)\s*\.orderBy\('updatedAt', 'desc'\)\s*\.get\(\);/g,
        newChatsQuery
      );
      
      // –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ chatsSnapshot.docs –Ω–∞ chatDocs
      chatsContent = chatsContent.replace(/chatsSnapshot\.docs/g, 'chatDocs');
      
      fs.writeFileSync(chatsPath, chatsContent);
      console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω src/routes/chats.js');
    }
    
    // –ò—Å–ø—Ä–∞–≤–∏—Ç—å routes/invitations.js
    console.log('üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ src/routes/invitations.js...');
    
    const invitationsPath = path.join(__dirname, '..', 'src', 'routes', 'invitations.js');
    let invitationsContent = fs.readFileSync(invitationsPath, 'utf8');
    
    // –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ invitations.js
    const oldInvitationsQuery = `const invitationsSnapshot = await db.collection('team_invitations')
      .where('projectId', '==', projectId)
      .where('senderId', '==', req.user.uid)
      .orderBy('createdAt', 'desc')
      .get();`;
    
    const newInvitationsQuery = `// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
    const invitationsSnapshot = await db.collection('team_invitations')
      .where('projectId', '==', projectId)
      .get();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
    const invitationDocs = invitationsSnapshot.docs
      .filter(doc => doc.data().senderId === req.user.uid)
      .sort((a, b) => {
        const aTime = a.data().createdAt?.toDate() || new Date(0);
        const bTime = b.data().createdAt?.toDate() || new Date(0);
        return bTime - aTime;
      });`;
    
    if (invitationsContent.includes('team_invitations')) {
      invitationsContent = invitationsContent.replace(
        /const invitationsSnapshot = await db\.collection\('team_invitations'\)\s*\.where\('projectId', '==', projectId\)\s*\.where\('senderId', '==', req\.user\.uid\)\s*\.orderBy\('createdAt', 'desc'\)\s*\.get\(\);/g,
        newInvitationsQuery
      );
      
      // –ó–∞–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ invitationsSnapshot.docs –Ω–∞ invitationDocs
      invitationsContent = invitationsContent.replace(/invitationsSnapshot\.docs/g, 'invitationDocs');
      
      fs.writeFileSync(invitationsPath, invitationsContent);
      console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω src/routes/invitations.js');
    }
    
    // –ò—Å–ø—Ä–∞–≤–∏—Ç—å routes/teams.js –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ src/routes/teams.js...');
    
    const teamsPath = path.join(__dirname, '..', 'src', 'routes', 'teams.js');
    if (fs.existsSync(teamsPath)) {
      let teamsContent = fs.readFileSync(teamsPath, 'utf8');
      
      // –£–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ where –∏ orderBy
      const complexQueries = [
        /\.where\([^)]+\)\s*\.where\([^)]+\)\s*\.orderBy\([^)]+\)/g,
        /\.where\([^)]+\)\s*\.orderBy\([^)]+\)\s*\.where\([^)]+\)/g
      ];
      
      let modified = false;
      complexQueries.forEach(regex => {
        if (regex.test(teamsContent)) {
          console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ teams.js, —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
          modified = true;
        }
      });
      
      if (!modified) {
        console.log('‚úÖ src/routes/teams.js –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
      }
    }
    
    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Firestore –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
  }
}

fixFirestoreQueries().then(() => {
  console.log('\nüéâ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤.');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 