const { db } = require('../src/config/firebase');

async function fixPMTeams() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è PM...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pmSnapshot = await db.collection('users').where('email', '==', 'pm@mail.ru').get();
    if (pmSnapshot.empty) {
      console.log('‚ùå PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const pmUser = pmSnapshot.docs[0];
    const pmData = pmUser.data();
    console.log('üë§ PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', pmUser.id);

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    const projectsSnapshot = await db.collection('projects').where('pmId', '==', pmUser.id).get();
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤ PM: ${projectsSnapshot.size}`);

    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ PM
    for (const projectDoc of projectsSnapshot.docs) {
      const projectData = projectDoc.data();
      console.log(`\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: ${projectData.title}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const existingTeamSnapshot = await db.collection('teams')
        .where('projectId', '==', projectDoc.id)
        .get();

      if (!existingTeamSnapshot.empty) {
        console.log('  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
      const teamData = {
        name: `–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${projectData.title}`,
        description: `–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ "${projectData.title}"`,
        projectId: projectDoc.id,
        projectName: projectData.title,
        teamLead: pmUser.id,
        pm: pmUser.id,
        members: [pmUser.id, ...(projectData.teamMembers || [])],
        memberIds: [pmUser.id, ...(projectData.teamMembers || [])],
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: pmUser.id,
        status: 'active'
      };

      const teamRef = await db.collection('teams').add(teamData);
      console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${teamRef.id}`);
    }

    // 4. –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º PM –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
    const existingTeamsSnapshot = await db.collection('teams').limit(3).get();
    console.log(`\nüë• –î–æ–±–∞–≤–ª—è–µ–º PM –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã...`);

    let addedToTeams = 0;
    for (const teamDoc of existingTeamsSnapshot.docs) {
      const teamData = teamDoc.data();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ PM —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      const isPMInTeam = teamData.teamLead === pmUser.id ||
                        teamData.pm === pmUser.id ||
                        (Array.isArray(teamData.members) && teamData.members.includes(pmUser.id)) ||
                        (Array.isArray(teamData.memberIds) && teamData.memberIds.includes(pmUser.id));

      if (isPMInTeam) {
        console.log(`  ‚è≠Ô∏è  PM —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ: ${teamData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        continue;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º PM –≤ –∫–æ–º–∞–Ω–¥—É
      const updateData = {};
      
      if (Array.isArray(teamData.members)) {
        updateData.members = [...teamData.members, pmUser.id];
      } else if (teamData.members && typeof teamData.members === 'object') {
        updateData.members = { ...teamData.members, [pmUser.id]: { role: 'pm', joinedAt: new Date() } };
      } else {
        updateData.members = [pmUser.id];
      }

      if (Array.isArray(teamData.memberIds)) {
        updateData.memberIds = [...teamData.memberIds, pmUser.id];
      } else {
        updateData.memberIds = [pmUser.id];
      }

      updateData.updatedAt = new Date();

      await db.collection('teams').doc(teamDoc.id).update(updateData);
      console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É: ${teamData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      addedToTeams++;

      if (addedToTeams >= 3) break; // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –≤ 3 –∫–æ–º–∞–Ω–¥—ã
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const allTeamsSnapshot = await db.collection('teams').get();
    let pmTeamsCount = 0;

    allTeamsSnapshot.docs.forEach(doc => {
      const teamData = doc.data();
      const isPMInTeam = teamData.teamLead === pmUser.id ||
                        teamData.pm === pmUser.id ||
                        (Array.isArray(teamData.members) && teamData.members.includes(pmUser.id)) ||
                        (Array.isArray(teamData.memberIds) && teamData.memberIds.includes(pmUser.id)) ||
                        (teamData.members && typeof teamData.members === 'object' && teamData.members[pmUser.id]);
      
      if (isPMInTeam) {
        pmTeamsCount++;
        console.log(`  ‚úÖ PM –≤ –∫–æ–º–∞–Ω–¥–µ: ${teamData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      }
    });

    console.log(`\nüìä –ò—Ç–æ–≥–æ PM —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ ${pmTeamsCount} –∫–æ–º–∞–Ω–¥–∞—Ö`);
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:', error);
  }
}

fixPMTeams(); 