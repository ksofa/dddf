const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function debugAuthToken() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');

  try {
    // 1. –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω
    console.log('1Ô∏è‚É£ –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@admin.admin',
      password: 'admin123'
    });

    const { token, user } = loginResponse.data;
    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.displayName);
    console.log('üîë –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤):', token.substring(0, 50) + '...');
    console.log('üìã –†–æ–ª–∏:', user.roles);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç teams
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º...');
    const teamsResponse = await axios.get(`${API_BASE}/teams`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', teamsResponse.data.length);

    if (teamsResponse.data.length > 0) {
      const firstTeam = teamsResponse.data[0];
      console.log('üéØ –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:', firstTeam.name, 'ID:', firstTeam.id);

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ available-users
      console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ available-users...');
      try {
        const usersResponse = await axios.get(`${API_BASE}/teams/${firstTeam.id}/available-users`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', usersResponse.data.length);
        
        if (usersResponse.data.length > 0) {
          console.log('üë• –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
            name: usersResponse.data[0].name,
            email: usersResponse.data[0].email,
            role: usersResponse.data[0].role
          });
        }
      } catch (usersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ available-users:');
        console.error('Status:', usersError.response?.status);
        console.error('Message:', usersError.response?.data?.error || usersError.message);
      }

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã
      console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã...');
      try {
        const teamDetailsResponse = await axios.get(`${API_BASE}/teams/${firstTeam.id}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        console.log('üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', teamDetailsResponse.data.members?.length || 0);
      } catch (teamError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–∞–Ω–¥—ã:');
        console.error('Status:', teamError.response?.status);
        console.error('Message:', teamError.response?.data?.error || teamError.message);
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    try {
      const allUsersResponse = await axios.get(`${API_BASE}/users`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allUsersResponse.data.length);
    } catch (allUsersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      console.error('Status:', allUsersError.response?.status);
      console.error('Message:', allUsersError.response?.data?.error || allUsersError.message);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    }
  }
}

debugAuthToken().catch(console.error); 