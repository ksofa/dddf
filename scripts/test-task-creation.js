const axios = require('axios');

async function testTaskCreation() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM
    const loginResponse = await axios.post('http://localhost:3000/api/login', {
      email: 'pm@test.test',
      password: 'password123'
    });

    const token = loginResponse.data.token;
    console.log('‚úÖ PM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get('http://localhost:3000/api/projects', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    const projects = projectsResponse.data;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const project = projects[0];
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${project.title} (${project.id})`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á...');
    const tasksResponse = await axios.get(`http://localhost:3000/api/projects/${project.id}/tasks`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    console.log(`üìä –¢–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á: ${tasksResponse.data.length}`);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...');
    const newTaskData = {
      text: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ API',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–Ω–Ω–æ–π —á–µ—Ä–µ–∑ API',
      column: 'todo',
      status: 'todo',
      priority: 'high',
      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    };

    const createTaskResponse = await axios.post(
      `http://localhost:3000/api/projects/${project.id}/tasks`,
      newTaskData,
      {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', createTaskResponse.data.task);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á...');
    const updatedTasksResponse = await axios.get(`http://localhost:3000/api/projects/${project.id}/tasks`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    console.log(`üìä –ó–∞–¥–∞—á –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${updatedTasksResponse.data.length}`);
    
    // –ù–∞–π–¥–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    const createdTask = updatedTasksResponse.data.find(task => task.id === createTaskResponse.data.taskId);
    if (createdTask) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ');
      console.log('üìã –ó–∞–¥–∞—á–∞:', {
        id: createdTask.id,
        title: createdTask.title,
        status: createdTask.status,
        priority: createdTask.priority
      });
    } else {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ');
    }

    console.log('\nüéâ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    if (error.response) {
      console.log('HTTP —Å—Ç–∞—Ç—É—Å:', error.response.status);
    }
  }
}

testTaskCreation(); 