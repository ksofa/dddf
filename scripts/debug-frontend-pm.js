const { db } = require('../src/config/firebase');

async function debugFrontendPM() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PM –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pmSnapshot = await db.collection('users').where('email', '==', 'pm@mail.ru').get();
    if (pmSnapshot.empty) {
      console.log('‚ùå PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const pmUser = pmSnapshot.docs[0];
    const pmData = pmUser.data();
    console.log('üë§ PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
    console.log('   ID:', pmUser.id);
    console.log('   UID:', pmData.uid);
    console.log('   Email:', pmData.email);
    console.log('   –†–æ–ª–∏:', pmData.roles);
    console.log('   –ò–º—è:', pmData.displayName || pmData.fullName);

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    const projectsSnapshot = await db.collection('projects').where('pmId', '==', pmUser.id).get();
    console.log(`\nüìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤ PM: ${projectsSnapshot.size}`);

    if (projectsSnapshot.empty) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤');
      return;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
    for (const projectDoc of projectsSnapshot.docs) {
      const projectData = projectDoc.data();
      console.log(`\nüìã –ü—Ä–æ–µ–∫—Ç: ${projectData.title}`);
      console.log('   ID:', projectDoc.id);
      console.log('   pmId:', projectData.pmId);
      console.log('   manager:', projectData.manager);
      console.log('   teamLead:', projectData.teamLead);
      console.log('   teamMembers:', projectData.teamMembers?.length || 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const user = { uid: pmUser.id, roles: pmData.roles };
      const project = projectData;

      const isUserPM = user && (
        user.uid === project.teamLead ||
        user.uid === project.manager ||
        user.uid === project.pmId ||
        user.roles?.includes('admin') ||
        (user.roles?.includes('pm') && (
          project.teamLead === user.uid || 
          project.manager === user.uid || 
          project.pmId === user.uid
        ))
      );

      console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–ª–æ–≥–∏–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞):');
      console.log('   user.uid === project.teamLead:', user.uid === project.teamLead);
      console.log('   user.uid === project.manager:', user.uid === project.manager);
      console.log('   user.uid === project.pmId:', user.uid === project.pmId);
      console.log('   user.roles?.includes("admin"):', user.roles?.includes('admin'));
      console.log('   user.roles?.includes("pm"):', user.roles?.includes('pm'));
      console.log('   –ò—Ç–æ–≥–æ–≤—ã–π isUserPM:', isUserPM);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏
      const tasksSnapshot = await db.collection('projects').doc(projectDoc.id).collection('tasks').get();
      console.log(`\nüìù –ó–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${tasksSnapshot.size}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
      const columnsSnapshot = await db.collection('projects').doc(projectDoc.id).collection('columns').get();
      console.log(`üìä –ö–æ–ª–æ–Ω–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${columnsSnapshot.size}`);

      if (!columnsSnapshot.empty) {
        console.log('   –ö–æ–ª–æ–Ω–∫–∏:');
        columnsSnapshot.docs.forEach(doc => {
          const columnData = doc.data();
          console.log(`     - ${columnData.name} (order: ${columnData.order})`);
        });
      }

      break; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã PM
    console.log('\nüë• –ö–æ–º–∞–Ω–¥—ã PM:');
    const teamsSnapshot = await db.collection('teams').get();
    let pmTeamsCount = 0;

    teamsSnapshot.docs.forEach(doc => {
      const teamData = doc.data();
      const isPMInTeam = teamData.teamLead === pmUser.id ||
                        teamData.pm === pmUser.id ||
                        (Array.isArray(teamData.members) && teamData.members.includes(pmUser.id)) ||
                        (Array.isArray(teamData.memberIds) && teamData.memberIds.includes(pmUser.id)) ||
                        (teamData.members && typeof teamData.members === 'object' && teamData.members[pmUser.id]);
      
      if (isPMInTeam) {
        pmTeamsCount++;
        console.log(`   ‚úÖ ${teamData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: ${doc.id})`);
      }
    });

    console.log(`\nüìä –ò—Ç–æ–≥–æ PM —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ ${pmTeamsCount} –∫–æ–º–∞–Ω–¥–∞—Ö`);

    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º uid');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º pmId');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—é—Ç "pm"');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

debugFrontendPM(); 