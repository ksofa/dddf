// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
const { db } = require('../src/config/firebase');
const { analyzeProjectsWithoutTeams } = require('./analyze-projects-without-teams');

async function createTeamsForProjects() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –∫–æ–º–∞–Ω–¥
    const projectsWithoutTeams = await analyzeProjectsWithoutTeams();
    
    if (projectsWithoutTeams.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–º–∞–Ω–¥—ã!');
      return;
    }
    
    console.log(`\n6Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è ${projectsWithoutTeams.length} –ø—Ä–æ–µ–∫—Ç–æ–≤...\n`);
    
    const createdTeams = [];
    const errors = [];
    
    // 2. –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    for (const project of projectsWithoutTeams) {
      try {
        console.log(`üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${project.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const teamName = project.title ? `–ö–æ–º–∞–Ω–¥–∞ "${project.title}"` : `–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ ${project.id.substring(0, 8)}`;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º PM –∫–æ–º–∞–Ω–¥—ã
        const pmId = project.pmId || project.manager || null;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const teamData = {
          name: teamName,
          description: project.description || `–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"`,
          projectId: project.id,
          pmId: pmId,
          memberIds: [],
          members: [],
          createdAt: new Date(),
          updatedAt: new Date(),
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          autoCreated: true,
          createdFrom: 'project'
        };
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å PM, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ teamLead
        if (pmId) {
          try {
            const pmDoc = await db.collection('users').doc(pmId).get();
            if (pmDoc.exists) {
              const pmData = pmDoc.data();
              teamData.teamLead = {
                uid: pmId,
                name: pmData.fullName || pmData.displayName || pmData.email,
                email: pmData.email,
                role: 'pm'
              };
              console.log(`   ‚úÖ PM –Ω–∞–∑–Ω–∞—á–µ–Ω: ${pmData.fullName || pmData.email}`);
            }
          } catch (error) {
            console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PM: ${error.message}`);
          }
        } else {
          console.log(`   ‚ö†Ô∏è PM –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞`);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const teamRef = await db.collection('teams').add(teamData);
        
        createdTeams.push({
          id: teamRef.id,
          name: teamName,
          projectId: project.id,
          projectTitle: project.title,
          pmId: pmId
        });
        
        console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: ${teamRef.id}`);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${project.id}: ${error.message}`);
        errors.push({
          projectId: project.id,
          projectTitle: project.title,
          error: error.message
        });
      }
    }
    
    // 3. –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:');
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${createdTeams.length} –∫–æ–º–∞–Ω–¥`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errors.length}`);
    
    if (createdTeams.length > 0) {
      console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      createdTeams.forEach((team, index) => {
        console.log(`   ${index + 1}. "${team.name}" (${team.id})`);
        console.log(`      –ü—Ä–æ–µ–∫—Ç: ${team.projectTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${team.projectId})`);
        console.log(`      PM: ${team.pmId || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
      });
    }
    
    if (errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      errors.forEach((error, index) => {
        console.log(`   ${index + 1}. –ü—Ä–æ–µ–∫—Ç: ${error.projectTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${error.projectId})`);
        console.log(`      –û—à–∏–±–∫–∞: ${error.error}`);
      });
    }
    
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    return { createdTeams, errors };
    
  } catch (error) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
if (require.main === module) {
  createTeamsForProjects().then(() => {
    process.exit(0);
  }).catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { createTeamsForProjects }; 