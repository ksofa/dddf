const admin = require('firebase-admin');
const path = require('path');
require('dotenv').config();

// Initialize Firebase Admin
const serviceAccount = {
  projectId: process.env.FIREBASE_PROJECT_ID,
  privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  clientEmail: process.env.FIREBASE_CLIENT_EMAIL
};

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function diagnosePMData() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');
    
    // –ù–∞–π—Ç–∏ PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersSnapshot = await db.collection('users')
      .where('email', '==', 'pm@test.test')
      .get();
    
    if (usersSnapshot.empty) {
      console.log('‚ùå PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const pmUser = usersSnapshot.docs[0];
    const pmData = pmUser.data();
    console.log('üë§ PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${pmUser.id}`);
    console.log(`   Email: ${pmData.email}`);
    console.log(`   –†–æ–ª–∏: ${pmData.roles?.join(', ')}`);
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≥–¥–µ PM —è–≤–ª—è–µ—Ç—Å—è PM
    console.log('üìã –ü—Ä–æ–µ–∫—Ç—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è PM:');
    const projectsSnapshot = await db.collection('projects')
      .where('pm.uid', '==', pmUser.id)
      .get();
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsSnapshot.size}`);
    const projectIds = [];
    
    projectsSnapshot.forEach(doc => {
      const project = doc.data();
      projectIds.push(doc.id);
      console.log(`   - ${project.name} (ID: ${doc.id})`);
      console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${project.description}`);
      console.log(`     PM: ${project.pm?.displayName || project.pm?.name}`);
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
    console.log('üë• –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ:');
    const allTeamsSnapshot = await db.collection('teams').get();
    console.log(`   –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${allTeamsSnapshot.size}`);
    
    allTeamsSnapshot.forEach(doc => {
      const team = doc.data();
      console.log(`   - ${team.name} (ID: ${doc.id})`);
      console.log(`     –ü—Ä–æ–µ–∫—Ç: ${team.projectId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`     –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members?.length || 0}`);
      
      if (team.members) {
        team.members.forEach(member => {
          console.log(`       * ${member.name} (${member.role})`);
        });
      }
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ PM
    console.log('üîó –ö–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ PM:');
    for (const projectId of projectIds) {
      const teamsSnapshot = await db.collection('teams')
        .where('projectId', '==', projectId)
        .get();
      
      console.log(`   –ü—Ä–æ–µ–∫—Ç ${projectId}: ${teamsSnapshot.size} –∫–æ–º–∞–Ω–¥`);
      teamsSnapshot.forEach(doc => {
        const team = doc.data();
        console.log(`     - ${team.name} (ID: ${doc.id})`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≥–¥–µ PM —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    console.log('\nüë§ –ö–æ–º–∞–Ω–¥—ã –≥–¥–µ PM —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º:');
    const memberTeamsSnapshot = await db.collection('teams')
      .where('members', 'array-contains-any', [
        { uid: pmUser.id },
        { id: pmUser.id }
      ])
      .get();
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${memberTeamsSnapshot.size}`);
    memberTeamsSnapshot.forEach(doc => {
      const team = doc.data();
      console.log(`   - ${team.name} (ID: ${doc.id})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    console.log('\nüìß –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã:');
    const invitationsSnapshot = await db.collection('team_invitations').get();
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${invitationsSnapshot.size}`);
    
    invitationsSnapshot.forEach(doc => {
      const invitation = doc.data();
      console.log(`   - –û—Ç: ${invitation.senderName} –∫: ${invitation.receiverName}`);
      console.log(`     –ö–æ–º–∞–Ω–¥–∞: ${invitation.teamName}`);
      console.log(`     –°—Ç–∞—Ç—É—Å: ${invitation.status}`);
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  }
}

diagnosePMData().then(() => {
  console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 