// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS –ø—Ä–æ–±–ª–µ–º—ã
const axios = require('axios');

async function testCORSFix() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS –ø—Ä–æ–±–ª–µ–º—ã...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await axios.get('http://localhost:3000/api/health');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthResponse.data.message);
    
    // 2. –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω
    console.log('\n2Ô∏è‚É£ –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω...');
    const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
      email: 'admin@admin.admin',
      password: 'admin123'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ Cache-Control
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ Cache-Control...');
    const applicationsResponse = await axios.get('http://localhost:3000/api/applications', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —Å Cache-Control –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —É—Å–ø–µ—à–µ–Ω!');
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${applicationsResponse.data.length}`);
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await axios.get('http://localhost:3000/api/users', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    const pms = usersResponse.data.filter(user => user.roles.includes('pm'));
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–µ–Ω!');
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ PM: ${pms.length}`);
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! CORS –ø—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`- –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚úÖ`);
    console.log(`- –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ‚úÖ`);
    console.log(`- Cache-Control –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: ‚úÖ`);
    console.log(`- –ó–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è: ‚úÖ (${applicationsResponse.data.length} —à—Ç.)`);
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è: ‚úÖ (${pms.length} PM)`);
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    
    if (error.response) {
      console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status, error.response.data);
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm start');
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCORSFix(); 