const { db, auth } = require('../src/config/firebase');
const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000/api';

async function generateAdminToken() {
  try {
    // ID –∞–¥–º–∏–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const adminUid = 'ixClpAfDIoQQR0X8Zja8N7SM4gz2';
    const customToken = await auth.createCustomToken(adminUid);
    return customToken;
  } catch (error) {
    console.error('Error generating admin token:', error);
    throw error;
  }
}

async function testApplicationsAccess() {
  try {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞...');
    const adminToken = await generateAdminToken();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–∞–º...');
    const response = await fetch(`${API_BASE}/applications`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (response.ok) {
      const applications = await response.json();
      console.log('‚úÖ –ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:', applications.length);
      console.log('üìã –ü–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏:', applications.slice(0, 3));
    } else {
      const error = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

async function createTestApplication() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É...');
    
    const testApplication = {
      type: 'client_request',
      projectTitle: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞',
      projectDescription: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
      budget: 100000,
      deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
      status: 'pending',
      senderId: 'test-client-id',
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const docRef = await db.collection('applications').add(testApplication);
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', docRef.id);
    return docRef.id;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏:', error);
    throw error;
  }
}

async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞ –∫ –∑–∞—è–≤–∫–∞–º...\n');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
  await createTestApplication();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
  await testApplicationsAccess();
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  process.exit(0);
}

main().catch(console.error); 