const axios = require('axios');

async function testAdminApplications() {
  const baseURL = 'http://localhost:3000/api';
  
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –∑–∞—è–≤–æ–∫...\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...');
    const healthResponse = await axios.get(`${baseURL}/health`);
    console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthResponse.data.message);
    
    // 2. –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω
    console.log('\n2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –∞–¥–º–∏–Ω...');
    const loginResponse = await axios.post(`${baseURL}/auth/login`, {
      email: 'admin@admin.admin',
      password: 'admin123'
    });
    
    const adminToken = loginResponse.data.token;
    console.log('‚úÖ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ (—Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º)...');
    const applicationsResponse = await axios.get(`${baseURL}/applications`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    const applications = applicationsResponse.data;
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${applications.length} –∑–∞—è–≤–æ–∫`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    const clientApplications = applications.filter(app => 
      !app.type || app.type === 'client_request' || app.projectTitle
    );
    
    console.log(`üìã –ó–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientApplications.length}`);
    clientApplications.forEach((app, index) => {
      console.log(`   ${index + 1}. ${app.projectTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} - ${app.status} (ID: ${app.id})`);
      console.log(`      –ö–ª–∏–µ–Ω—Ç: ${app.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`      Email: ${app.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`      –¢–µ–ª–µ—Ñ–æ–Ω: ${app.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      if (app.assignedTeamLead) {
        console.log(`      –ù–∞–∑–Ω–∞—á–µ–Ω PM: ${app.assignedTeamLead}`);
      }
      console.log('');
    });
    
    // 4. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PM
    console.log('4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...');
    const usersResponse = await axios.get(`${baseURL}/users`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    const users = usersResponse.data;
    const projectManagers = users.filter(user => user.roles && user.roles.includes('pm'));
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projectManagers.length} –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:`);
    projectManagers.forEach((pm, index) => {
      console.log(`   ${index + 1}. ${pm.fullName || pm.name} (${pm.email}) - ID: ${pm.id}`);
    });
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ PM –¥–ª—è –ø–µ—Ä–≤–æ–π pending –∑–∞—è–≤–∫–∏
    const pendingApplications = clientApplications.filter(app => app.status === 'pending' && !app.assignedTeamLead);
    
    if (pendingApplications.length > 0 && projectManagers.length > 0) {
      const testApp = pendingApplications[0];
      const testPM = projectManagers[0];
      
      console.log(`\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ "${testApp.projectTitle}" —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º PM "${testPM.fullName}"...`);
      
      try {
        const approveResponse = await axios.post(`${baseURL}/applications/${testApp.id}/approve`, {
          pmId: testPM.id
        }, {
          headers: {
            'Authorization': `Bearer ${adminToken}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞:', approveResponse.data.message);
        if (approveResponse.data.projectId) {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç —Å ID: ${approveResponse.data.projectId}`);
        }
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error.response?.data?.error || error.message);
      }
    } else {
      console.log('\n5. ‚ö†Ô∏è  –ù–µ—Ç pending –∑–∞—è–≤–æ–∫ –∏–ª–∏ PM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è');
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    console.log('\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫...');
    const updatedResponse = await axios.get(`${baseURL}/applications`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`,
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
    const updatedApplications = updatedResponse.data;
    const updatedClientApps = updatedApplications.filter(app => 
      !app.type || app.type === 'client_request' || app.projectTitle
    );
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:');
    const stats = {
      pending: updatedClientApps.filter(app => app.status === 'pending').length,
      approved: updatedClientApps.filter(app => app.status === 'approved').length,
      rejected: updatedClientApps.filter(app => app.status === 'rejected').length,
      withPM: updatedClientApps.filter(app => app.assignedTeamLead).length
    };
    
    console.log(`   –û–∂–∏–¥–∞—é—Ç: ${stats.pending}`);
    console.log(`   –û–¥–æ–±—Ä–µ–Ω—ã: ${stats.approved}`);
    console.log(`   –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: ${stats.rejected}`);
    console.log(`   –° –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º PM: ${stats.withPM}`);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
    }
  }
}

testAdminApplications(); 