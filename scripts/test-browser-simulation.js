const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

// PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const PM_EMAIL = 'pm@mail.ru';
const PM_PASSWORD = '123456';

async function testBrowserSimulation() {
  try {
    console.log('üåê –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...\n');

    // 1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
    console.log('1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: PM_EMAIL,
      password: PM_PASSWORD
    });

    const { token, user } = loginResponse.data;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è:', {
      uid: user.uid,
      email: user.email,
      roles: user.roles,
      role: user.role // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —ç—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ
    });

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
    const projectsResponse = await axios.get(`${API_BASE}/projects`, { headers });
    const projects = projectsResponse.data;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    
    if (projects.length === 0) {
      console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const testProject = projects[0];
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', {
      id: testProject.id,
      title: testProject.title,
      pmId: testProject.pmId,
      manager: testProject.manager
    });

    // 3. –í—ã–∑—ã–≤–∞–µ–º getProjectTeam (—Ç–æ—á–Ω–æ –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
    console.log('\n3. –í—ã–∑–æ–≤ getProjectTeam (–∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)...');
    const teamResponse = await axios.get(`${API_BASE}/projects/${testProject.id}/team`, { headers });
    const team = teamResponse.data;
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω—ã:', {
      projectId: team.projectId,
      projectTitle: team.projectTitle,
      teamMembersCount: team.teamMembers?.length || 0,
      canManage: team.canManage,
      teamLead: team.teamLead,
      customerInfo: team.customerInfo
    });

    // 4. –¢–æ—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ ProjectTeamScreen.tsx
    console.log('\n4. –°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ ProjectTeamScreen.tsx...');
    
    // –°—Ç—Ä–æ–∫–∞ 152: const isPM = user?.roles?.includes('pm') || user?.roles?.includes('project_manager') || user?.role === 'pm';
    const isPM = user?.roles?.includes('pm') || user?.roles?.includes('project_manager') || user?.role === 'pm';
    
    // –°—Ç—Ä–æ–∫–∏ 155-158: const isProjectManager = team && user && (team.canManage || user.roles?.includes('admin'));
    const isProjectManager = team && user && (
      team.canManage || // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç canManage: project.manager === userId
      user.roles?.includes('admin')
    );
    
    // –°—Ç—Ä–æ–∫–∞ 160: const canInvite = isPM && isProjectManager;
    const canInvite = isPM && isProjectManager;

    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ ProjectTeamScreen):', {
      'user?.uid': user?.uid,
      'user?.roles': user?.roles,
      'user?.role': user?.role,
      'team?.canManage': team?.canManage,
      'user?.roles?.includes("admin")': user?.roles?.includes('admin'),
      '---': '---',
      'isPM': isPM,
      'isProjectManager': isProjectManager,
      'canInvite': canInvite
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('\n5. –ü–æ—à–∞–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π...');
    
    const condition1 = user?.roles?.includes('pm');
    const condition2 = user?.roles?.includes('project_manager');
    const condition3 = user?.role === 'pm';
    const condition4 = team?.canManage;
    const condition5 = user?.roles?.includes('admin');

    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—Å–ª–æ–≤–∏—è:');
    console.log(`   user?.roles?.includes('pm'): ${condition1}`);
    console.log(`   user?.roles?.includes('project_manager'): ${condition2}`);
    console.log(`   user?.role === 'pm': ${condition3}`);
    console.log(`   team?.canManage: ${condition4}`);
    console.log(`   user?.roles?.includes('admin'): ${condition5}`);
    console.log('---');
    console.log(`   isPM = (${condition1} || ${condition2} || ${condition3}) = ${isPM}`);
    console.log(`   isProjectManager = (${condition4} || ${condition5}) = ${isProjectManager}`);
    console.log(`   canInvite = ${isPM} && ${isProjectManager} = ${canInvite}`);

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∫–Ω–æ–ø–∫–æ–π
    console.log('\n6. –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏...');
    if (canInvite) {
      console.log('‚úÖ –ö–ù–û–ü–ö–ê –î–û–õ–ñ–ù–ê –û–¢–û–ë–†–ê–ñ–ê–¢–¨–°–Ø!');
      console.log('   –í JSX: {canInvite && (<button>+ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</button>)}');
    } else {
      console.log('‚ùå –ö–ù–û–ü–ö–ê –ù–ï –ë–£–î–ï–¢ –û–¢–û–ë–†–ê–ñ–ê–¢–¨–°–Ø!');
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      if (!isPM) {
        console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PM');
      }
      if (!isProjectManager) {
        console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞');
      }
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º getAvailableExecutors (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Ç–∞–º)
    console.log('\n7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getAvailableExecutors...');
    try {
      const executorsResponse = await axios.get(`${API_BASE}/users/executors/search`, { headers });
      const executors = executorsResponse.data;
      
      console.log(`‚úÖ getAvailableExecutors —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ ${executors.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π`);
      
      if (executors.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - —ç—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏');
      }

    } catch (error) {
      console.log('‚ùå getAvailableExecutors –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response?.status, error.response?.data?.error);
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã!');
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
    console.log('\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
    const requiredFields = {
      'user.uid': user?.uid,
      'user.roles': user?.roles,
      'team.canManage': team?.canManage,
      'team.projectId': team?.projectId,
      'team.teamMembers': team?.teamMembers
    };

    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:');
    Object.entries(requiredFields).forEach(([field, value]) => {
      if (value === undefined || value === null) {
        console.log(`   ‚ùå ${field}: ${value} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!)`);
      } else {
        console.log(`   ‚úÖ ${field}: ${typeof value === 'object' ? JSON.stringify(value) : value}`);
      }
    });

    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –î–ò–ê–ì–ù–û–ó:');
    if (canInvite) {
      console.log('‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∫–Ω–æ–ø–∫–∞ –î–û–õ–ñ–ù–ê –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è');
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∏–¥–Ω–∞:');
      console.log('   1. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ API');
      console.log('   2. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
      console.log('   3. –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
      console.log('   4. CSS —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É');
      console.log('   5. –£—Å–ª–æ–≤–∏–µ –≤ JSX –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    } else {
      console.log('‚ùå –õ–æ–≥–∏–∫–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - –∫–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
      console.log('   –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
  }
}

testBrowserSimulation(); 