const { db } = require('../src/config/firebase');
const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

async function testPMFunctionality() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PM...\n');

    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM...');
    
    try {
      const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
        email: 'pm@mail.ru',
        password: '123456'
      });

      const token = loginResponse.data.token;
      const pmUser = loginResponse.data.user;
      console.log('‚úÖ PM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', pmUser.email, '–†–æ–ª–∏:', pmUser.roles);

      const headers = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };

      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM
      console.log('\nüìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ PM...');
      const projectsResponse = await axios.get(`${API_BASE_URL}/projects`, { headers });
      const projects = projectsResponse.data;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);

      if (projects.length === 0) {
        console.log('‚ùå –£ PM –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }

      const testProject = projects[0];
      console.log(`üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: ${testProject.title} (ID: ${testProject.id})`);

      // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–∫—Ä–∞–º –¥–æ—Å–∫–µ
      console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á...');
      
      try {
        const taskData = {
          text: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç PM',
          description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏',
          column: '–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å',
          status: 'todo',
          priority: 'medium',
          color: '#3B82F6'
        };

        const createTaskResponse = await axios.post(
          `${API_BASE_URL}/projects/${testProject.id}/tasks`,
          taskData,
          { headers }
        );

        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', createTaskResponse.data);
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.response?.data?.message || error.message);
        console.log('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      }

      // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ PM
      console.log('\nüë• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ PM...');
      const teamsResponse = await axios.get(`${API_BASE_URL}/teams`, { headers });
      const teams = teamsResponse.data;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);

      if (teams.length === 0) {
        console.log('‚ùå –£ PM –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã PM
      teams.forEach((team, index) => {
        console.log(`  ${index + 1}. ${team.name} (ID: ${team.id})`);
        console.log(`     –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${team.members?.length || 0}`);
        console.log(`     PM: ${team.pm?.name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`);
      });

      // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      console.log('\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...');
      try {
        const executorsResponse = await axios.get(`${API_BASE_URL}/projects/${testProject.id}/members`, { headers });
        const executors = executorsResponse.data;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: ${executors.length}`);

        if (executors.length > 0) {
          const testExecutor = executors.find(user => user.roles?.includes('executor')) || executors[0];
          console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${testExecutor.displayName || testExecutor.name} (${testExecutor.email})`);

          // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
          console.log('\nüìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...');
          try {
            const invitationData = {
              projectId: testProject.id,
              userId: testExecutor.uid || testExecutor.id,
              message: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É!'
            };

            const inviteResponse = await axios.post(
              `${API_BASE_URL}/frontend/projects/${testProject.id}/invite`,
              invitationData,
              { headers }
            );

            console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', inviteResponse.data);
          } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error.response?.data?.message || error.message);
            console.log('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
          }
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:', error.response?.data?.message || error.message);
        console.log('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é executor
        console.log('   –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
        try {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
          console.log('   –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        } catch (dbError) {
          console.log('   ‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
        }
      }

      // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
      console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...');
      try {
        const invitationsResponse = await axios.get(`${API_BASE_URL}/projects/${testProject.id}/team-invitations`, { headers });
        const invitations = invitationsResponse.data;
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${invitations.length}`);

        invitations.forEach((invitation, index) => {
          console.log(`  ${index + 1}. ${invitation.userName} (${invitation.userEmail}) - ${invitation.status}`);
        });
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error.response?.data?.message || error.message);
        console.log('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      }

      // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∞–º –¥–æ—Å–∫–∏
      console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∞–º –¥–æ—Å–∫–∏...');
      try {
        const boardResponse = await axios.get(`${API_BASE_URL}/projects/${testProject.id}/board`, { headers });
        const boardData = boardResponse.data;
        console.log('‚úÖ –°–∫—Ä–∞–º –¥–æ—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        
        if (boardData.board) {
          const columns = Object.keys(boardData.board);
          console.log(`   –ö–æ–ª–æ–Ω–æ–∫: ${columns.length}`);
          
          columns.forEach(column => {
            const tasks = boardData.board[column];
            console.log(`   - ${column}: ${tasks?.length || 0} –∑–∞–¥–∞—á`);
          });
        }
        
        if (boardData.teamMembers) {
          console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: ${boardData.teamMembers.length}`);
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∞–º –¥–æ—Å–∫–∏:', error.response?.data?.message || error.message);
        console.log('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
      }

      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PM –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

    } catch (loginError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ PM:', loginError.response?.data?.message || loginError.message);
      console.error('   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', loginError.response?.data);
      console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', loginError.response?.status);
      console.error('   URL:', loginError.config?.url);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

testPMFunctionality(); 