// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { db } = require('../src/config/firebase');

async function checkTeams() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥...');
    const teamsSnapshot = await db.collection('teams').get();
    console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤ –±–∞–∑–µ: ${teamsSnapshot.size}\n`);
    
    if (teamsSnapshot.empty) {
      console.log('‚ùå –ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      return;
    }
    
    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    console.log('2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥:');
    const teams = [];
    
    for (const doc of teamsSnapshot.docs) {
      const teamData = { id: doc.id, ...doc.data() };
      teams.push(teamData);
      
      console.log(`\nüìã –ö–æ–º–∞–Ω–¥–∞: ${teamData.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      console.log(`   ID: ${doc.id}`);
      console.log(`   PM ID: ${teamData.pmId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${teamData.memberIds?.length || 0} —á–µ–ª.`);
      console.log(`   –ü—Ä–æ–µ–∫—Ç ID: ${teamData.projectId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${teamData.createdAt ? new Date(teamData.createdAt.seconds * 1000).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º PM
      if (teamData.pmId) {
        try {
          const pmDoc = await db.collection('users').doc(teamData.pmId).get();
          if (pmDoc.exists) {
            const pmData = pmDoc.data();
            console.log(`   PM: ${pmData.fullName || pmData.displayName || pmData.email} (${pmData.email})`);
          } else {
            console.log(`   ‚ö†Ô∏è PM –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
          }
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PM: ${error.message}`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (teamData.memberIds && teamData.memberIds.length > 0) {
        console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–∏:`);
        for (const memberId of teamData.memberIds) {
          try {
            const memberDoc = await db.collection('users').doc(memberId).get();
            if (memberDoc.exists) {
              const memberData = memberDoc.data();
              console.log(`     - ${memberData.fullName || memberData.displayName || memberData.email} (${memberData.email})`);
            } else {
              console.log(`     - ‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ ${memberId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
          } catch (error) {
            console.log(`     - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${memberId}`);
          }
        }
      }
    }
    
    // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ PM
    console.log('\n3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:');
    const pmStats = {};
    
    for (const team of teams) {
      if (team.pmId) {
        if (!pmStats[team.pmId]) {
          pmStats[team.pmId] = { count: 0, teams: [] };
        }
        pmStats[team.pmId].count++;
        pmStats[team.pmId].teams.push(team.name || team.id);
      }
    }
    
    for (const [pmId, stats] of Object.entries(pmStats)) {
      try {
        const pmDoc = await db.collection('users').doc(pmId).get();
        if (pmDoc.exists) {
          const pmData = pmDoc.data();
          console.log(`üë§ ${pmData.fullName || pmData.displayName || pmData.email}: ${stats.count} –∫–æ–º–∞–Ω–¥(—ã)`);
          console.log(`   –ö–æ–º–∞–Ω–¥—ã: ${stats.teams.join(', ')}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PM ${pmId}: ${error.message}`);
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞...');
    const adminDoc = await db.collection('users').where('email', '==', 'admin@admin.admin').get();
    
    if (!adminDoc.empty) {
      const adminData = adminDoc.docs[0].data();
      console.log(`‚úÖ –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω: ${adminData.email}`);
      console.log(`   –†–æ–ª–∏: ${adminData.roles?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`);
      console.log(`   –î–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ ${teams.length} –∫–æ–º–∞–Ω–¥(—ã)`);
    } else {
      console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTeams().then(() => {
  process.exit(0);
}).catch(error => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 