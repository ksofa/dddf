const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ 
const PM_USER = {
  email: 'pm@test.test',
  password: 'password123'
};

const EXECUTOR_USER = {
  email: 'executor5@test.test', 
  password: 'password123'
};

const ADMIN_USER = {
  email: 'admin@admin.admin',
  password: 'password123'
};

async function login(email, password) {
  try {
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email,
      password
    });
    return response.data.token;
  } catch (error) {
    console.error(`Login failed for ${email}:`, error.response?.data || error.message);
    throw error;
  }
}

async function testChatSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤...\n');

  try {
    // 1. –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('1Ô∏è‚É£ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const pmToken = await login(PM_USER.email, PM_USER.password);
    const executorToken = await login(EXECUTOR_USER.email, EXECUTOR_USER.password);
    const adminToken = await login(ADMIN_USER.email, ADMIN_USER.password);
    console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã');

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM...');
    const pmProjectsResponse = await axios.get(`${BASE_URL}/projects`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${pmProjectsResponse.data.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
    
    if (pmProjectsResponse.data.length === 0) {
      console.log('‚ùå PM –Ω–µ –≤–∏–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ - —Ç–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è');
      return;
    }

    const testProject = pmProjectsResponse.data[0];
    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç: "${testProject.title}" (ID: ${testProject.id})`);

    // 3. –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectChatsResponse = await axios.get(`${BASE_URL}/projects/${testProject.id}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`üì® –ü—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç ${projectChatsResponse.data.length} —á–∞—Ç–æ–≤`);

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –µ—Å–ª–∏ –Ω–µ—Ç
    let testChat;
    if (projectChatsResponse.data.length === 0) {
      console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç...');
      const createChatResponse = await axios.post(`${BASE_URL}/projects/${testProject.id}/chats`, {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã',
        type: 'group',
        participants: ['QH040Apx3segNZ9zHJrLP8y4UPD2'] // executor5@test.test
      }, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', createChatResponse.data.message);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      if (createChatResponse.data.chat) {
        testChat = createChatResponse.data.chat;
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        const updatedChatsResponse = await axios.get(`${BASE_URL}/projects/${testProject.id}/chats`, {
          headers: { Authorization: `Bearer ${pmToken}` }
        });
        testChat = updatedChatsResponse.data[0];
      }
    } else {
      testChat = projectChatsResponse.data[0];
    }

    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç: "${testChat.name}" (ID: ${testChat.id})`);

    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PM
    console.log('\n5Ô∏è‚É£ PM –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    const sendMessageResponse = await axios.post(`${BASE_URL}/projects/${testProject.id}/chats/${testChat.id}/messages`, {
      text: '–ü—Ä–∏–≤–µ—Ç –∫–æ–º–∞–Ω–¥–∞! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PM.'
    }, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', sendMessageResponse.data.message);

    // 6. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    console.log('\n6Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞...');
    const messagesResponse = await axios.get(`${BASE_URL}/projects/${testProject.id}/chats/${testChat.id}/messages`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`üì® –ß–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ${messagesResponse.data.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    if (messagesResponse.data.length > 0) {
      const lastMessage = messagesResponse.data[0];
      console.log(`üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${lastMessage.text}" –æ—Ç ${lastMessage.sender?.name || 'Unknown'}`);
    }

    // 7. Executor –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç
    console.log('\n7Ô∏è‚É£ Executor –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç...');
    try {
      const executorMessageResponse = await axios.post(`${BASE_URL}/projects/${testProject.id}/chats/${testChat.id}/messages`, {
        text: '–ü—Ä–∏–≤–µ—Ç! –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'
      }, {
        headers: { Authorization: `Bearer ${executorToken}` }
      });
      console.log('‚úÖ Executor –æ—Ç–≤–µ—Ç–∏–ª:', executorMessageResponse.data.message);
    } catch (error) {
      console.log('‚ùå Executor –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.response?.data?.message || error.message);
    }

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã
    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã...');
    try {
      const globalChatsResponse = await axios.get(`${BASE_URL}/chats`, {
        headers: { Authorization: `Bearer ${adminToken}` }
      });
      console.log(`üåê Admin –≤–∏–¥–∏—Ç ${globalChatsResponse.data.length} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤`);
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã:', error.response?.status);
    }

    // 9. –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
    console.log('\n9Ô∏è‚É£ Admin —Å–æ–∑–¥–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç...');
    try {
      const globalChatResponse = await axios.post(`${BASE_URL}/chats/global`, {
        name: '–û–±—â–∏–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        type: 'group',
        participants: ['5W6YYoii6HYhwWaI4zZSz15siSA3', 'QH040Apx3segNZ9zHJrLP8y4UPD2'] // PM –∏ Executor
      }, {
        headers: { Authorization: `Bearer ${adminToken}` }
      });
      console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:', globalChatResponse.data.message);
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç:', error.response?.data?.message || error.message);
    }

    // 10. –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    console.log('\nüîü –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ...');
    try {
      await axios.post(`${BASE_URL}/projects/${testProject.id}/chats/${testChat.id}/read`, {}, {
        headers: { Authorization: `Bearer ${executorToken}` }
      });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:', error.response?.data?.message || error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìä –ò—Ç–æ–≥–∏:');
    console.log(`   - –ü—Ä–æ–µ–∫—Ç–æ–≤ —É PM: ${pmProjectsResponse.data.length}`);
    console.log(`   - –ß–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${projectChatsResponse.data.length}`);
    console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: ${messagesResponse.data.length}`);
    console.log(`   - –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞: ‚úÖ`);
    console.log(`   - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ‚úÖ`);
    console.log(`   - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ‚úÖ`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP Status: ${error.response.status}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testChatSystem(); 