const fetch = require('node-fetch');

const API_BASE_URL = 'http://localhost:3000';

async function testTasksAPI() {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–¥–∞—á...');

    // –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ PM
    console.log('\n1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ PM...');
    const loginResponse = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'pm@mail.ru',
        password: 'password123'
      }),
    });

    if (!loginResponse.ok) {
      throw new Error(`Login failed: ${loginResponse.status}`);
    }

    const loginData = await loginResponse.json();
    const token = loginData.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á...');
    const tasksResponse = await fetch(`${API_BASE_URL}/api/tasks`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    if (!tasksResponse.ok) {
      const errorData = await tasksResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', errorData);
      return;
    }

    const tasks = await tasksResponse.json();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á`);

    if (tasks.length > 0) {
      console.log('\nüìã –ü–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏:');
      tasks.slice(0, 3).forEach((task, index) => {
        console.log(`   ${index + 1}. ${task.title} (${task.status}) - ${task.priority}`);
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    const projectsResponse = await fetch(`${API_BASE_URL}/api/projects`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    let projectId = 'test-project-1';
    if (projectsResponse.ok) {
      const projects = await projectsResponse.json();
      if (projects.length > 0) {
        projectId = projects[0].id;
        console.log(`   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${projects[0].title}`);
      }
    }

    // –ü–æ–ª—É—á–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const executorsResponse = await fetch(`${API_BASE_URL}/api/users/executors/search?query=`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    let assignedTo = 'test-executor-1';
    if (executorsResponse.ok) {
      const executors = await executorsResponse.json();
      if (executors.length > 0) {
        assignedTo = executors[0].id;
        console.log(`   –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${executors[0].name}`);
      }
    }

    const newTaskData = {
      title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ API',
      description: '–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      assignedTo: assignedTo,
      projectId: projectId,
      priority: 'medium',
      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
    };

    const createTaskResponse = await fetch(`${API_BASE_URL}/api/tasks`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newTaskData),
    });

    if (!createTaskResponse.ok) {
      const errorData = await createTaskResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', errorData);
    } else {
      const newTask = await createTaskResponse.json();
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${newTask.title} (ID: ${newTask.id})`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      console.log('\n4Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏...');
      const updateResponse = await fetch(`${API_BASE_URL}/api/tasks/${newTask.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          status: 'in_progress'
        }),
      });

      if (!updateResponse.ok) {
        const errorData = await updateResponse.json();
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', errorData);
      } else {
        const updatedTask = await updateResponse.json();
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedTask.status}`);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testTasksAPI().then(() => {
  console.log('\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 