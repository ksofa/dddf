const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
const PM_USER = {
  email: 'pm@example.com',
  password: 'password123'
};

async function testPMTaskCreation() {
  try {
    console.log('üß™ Testing PM Task Creation...\n');

    // 1. –õ–æ–≥–∏–Ω PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. Logging in PM user...');
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, PM_USER);
    const token = loginResponse.data.token;
    console.log('‚úÖ PM user logged in successfully');
    console.log('User data:', {
      uid: loginResponse.data.user.uid,
      email: loginResponse.data.user.email,
      roles: loginResponse.data.user.roles
    });

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2. Getting PM projects...');
    const projectsResponse = await axios.get(`${BASE_URL}/api/projects`, { headers });
    const projects = projectsResponse.data;
    console.log(`‚úÖ Found ${projects.length} projects`);
    
    if (projects.length === 0) {
      console.log('‚ùå No projects found for PM user');
      return;
    }

    const project = projects[0];
    console.log('Using project:', {
      id: project.id,
      name: project.name,
      pmId: project.pmId,
      manager: project.manager
    });

    // 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    console.log('\n3. Getting users for assignment...');
    try {
      const usersResponse = await axios.get(`${BASE_URL}/api/users`, { headers });
      const users = usersResponse.data;
      console.log(`‚úÖ Found ${users.length} users`);
      
      // –ù–∞–π–¥–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const executor = users.find(u => u.roles && u.roles.includes('executor'));
      console.log('Executor found:', executor ? {
        id: executor.id,
        email: executor.email,
        roles: executor.roles
      } : 'None');

      // 4. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
      console.log('\n4. Creating task...');
      const taskData = {
        text: 'Test task created by PM',
        column: 'todo',
        assignee: executor ? executor.id : null,
        status: 'todo',
        priority: 'medium',
        description: 'This is a test task created by PM user'
      };

      console.log('Task data:', taskData);

      const createTaskResponse = await axios.post(
        `${BASE_URL}/api/projects/${project.id}/tasks`,
        taskData,
        { headers }
      );

      console.log('‚úÖ Task created successfully!');
      console.log('Response:', createTaskResponse.data);

      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å
      console.log('\n5. Verifying task creation...');
      const tasksResponse = await axios.get(
        `${BASE_URL}/api/projects/${project.id}/tasks`,
        { headers }
      );

      const tasks = tasksResponse.data;
      const createdTask = tasks.find(t => t.text === taskData.text);
      
      if (createdTask) {
        console.log('‚úÖ Task verified in project tasks');
        console.log('Created task:', {
          id: createdTask.id,
          text: createdTask.text,
          column: createdTask.column,
          assignee: createdTask.assignee,
          createdBy: createdTask.createdBy
        });
      } else {
        console.log('‚ùå Task not found in project tasks');
      }

    } catch (usersError) {
      console.log('‚ùå Error getting users:', usersError.response?.data || usersError.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      console.log('\n4. Creating task without assignee...');
      const taskData = {
        text: 'Test task created by PM (no assignee)',
        column: 'todo',
        status: 'todo',
        priority: 'medium',
        description: 'This is a test task created by PM user without assignee'
      };

      const createTaskResponse = await axios.post(
        `${BASE_URL}/api/projects/${project.id}/tasks`,
        taskData,
        { headers }
      );

      console.log('‚úÖ Task created successfully without assignee!');
      console.log('Response:', createTaskResponse.data);
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data || error.message);
    if (error.response?.status === 403) {
      console.log('\nüîç Debugging 403 error...');
      console.log('Response data:', error.response.data);
      console.log('This suggests PM user does not have permission to create tasks');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testPMTaskCreation(); 