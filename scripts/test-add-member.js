const { admin } = require('../src/config/firebase');

async function testAddMemberFlow() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...\n');
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pmToken = await admin.auth().createCustomToken('5W6YYoii6HYhwWaI4zZSz15siSA3');
    console.log('‚úÖ PM —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω');
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResponse = await fetch('http://localhost:3000/api/users', {
      headers: {
        'Authorization': `Bearer ${pmToken}`
      }
    });
    
    if (usersResponse.ok) {
      const users = await usersResponse.json();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
      const executors = users.filter(u => 
        u.roles && (
          u.roles.includes('developer') || 
          u.roles.includes('designer') || 
          u.roles.includes('qa') || 
          u.roles.includes('team_lead') ||
          u.roles.includes('executor')
        )
      );
      console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ ${executors.length} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:`);
      executors.slice(0, 5).forEach(user => {
        console.log(`   - ${user.displayName} (${user.email}) - ${user.roles.join(', ')}`);
      });
      
      // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      if (executors.length > 0) {
        const testUser = executors[0];
        console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ${testUser.displayName} –≤ –ø—Ä–æ–µ–∫—Ç project-1...`);
        
        const addMemberResponse = await fetch('http://localhost:3000/api/projects/project-1/add-member', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${pmToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            userId: testUser.uid
          })
        });
        
        if (addMemberResponse.ok) {
          const result = await addMemberResponse.json();
          console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', result.message);
        } else {
          const error = await addMemberResponse.json();
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:', error.error || error.message);
        }
      }
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.status);
    }
    
    console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ pm@test.test / password123');
    console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ–µ–∫—Ç—ã"');
    console.log('4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–æ–º–∞–Ω–¥–∞" —É –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"');
    console.log('6. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ–º–∞–Ω–¥—É');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
  
  process.exit(0);
}

testAddMemberFlow(); 