const { db } = require('../src/config/firebase');

async function createPMProjectsAndChats() {
  try {
    console.log('üöÄ Creating projects and chats for PM user...');

    // –ù–∞—Ö–æ–¥–∏–º PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pmSnapshot = await db.collection('users').where('email', '==', 'pm@mail.ru').get();
    if (pmSnapshot.empty) {
      console.error('‚ùå PM user pm@mail.ru not found');
      return;
    }

    const pmUser = { id: pmSnapshot.docs[0].id, ...pmSnapshot.docs[0].data() };
    console.log(`‚úÖ Found PM user: ${pmUser.fullName} (${pmUser.email})`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥
    const usersSnapshot = await db.collection('users').get();
    const allUsers = [];
    usersSnapshot.forEach(doc => {
      const userData = doc.data();
      allUsers.push({
        id: doc.id,
        ...userData
      });
    });

    const executors = allUsers.filter(u => u.roles?.includes('executor'));
    const customers = allUsers.filter(u => u.roles?.includes('customer'));
    const admins = allUsers.filter(u => u.roles?.includes('admin'));

    console.log(`Found ${executors.length} executors, ${customers.length} customers, ${admins.length} admins`);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è PM
    const projectsToCreate = [
      {
        title: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω–æ–π –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–ª–∞—Ç—ã',
        status: 'active',
        priority: 'high',
        budget: 850000,
        deadline: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 –¥–Ω–µ–π
        customerId: customers[0]?.id || pmUser.id,
        pmId: pmUser.id,
        teamMembers: executors.slice(0, 4).map(e => e.id),
        technologies: ['React', 'Node.js', 'PostgreSQL', 'Stripe'],
        category: 'web-development'
      },
      {
        title: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏',
        description: 'iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã',
        status: 'planning',
        priority: 'medium',
        budget: 1200000,
        deadline: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 –¥–Ω–µ–π
        customerId: customers[1]?.id || pmUser.id,
        pmId: pmUser.id,
        teamMembers: executors.slice(2, 6).map(e => e.id),
        technologies: ['React Native', 'Firebase', 'Google Maps API'],
        category: 'mobile-development'
      },
      {
        title: 'CRM —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
        description: '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
        status: 'active',
        priority: 'high',
        budget: 650000,
        deadline: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000), // 45 –¥–Ω–µ–π
        customerId: customers[2]?.id || pmUser.id,
        pmId: pmUser.id,
        teamMembers: executors.slice(1, 4).map(e => e.id),
        technologies: ['Vue.js', 'Laravel', 'MySQL', 'Chart.js'],
        category: 'web-development'
      },
      {
        title: '–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è',
        description: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤ —Å –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏',
        status: 'completed',
        priority: 'medium',
        budget: 950000,
        deadline: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // –∑–∞–≤–µ—Ä—à–µ–Ω 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        customerId: customers[3]?.id || pmUser.id,
        pmId: pmUser.id,
        teamMembers: executors.slice(0, 5).map(e => e.id),
        technologies: ['Angular', 'Spring Boot', 'WebRTC', 'AWS'],
        category: 'web-development'
      },
      {
        title: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª',
        description: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç–∞–ª –∫–æ–º–ø–∞–Ω–∏–∏ —Å HR-–º–æ–¥—É–ª—è–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º',
        status: 'active',
        priority: 'low',
        budget: 750000,
        deadline: new Date(Date.now() + 120 * 24 * 60 * 60 * 1000), // 120 –¥–Ω–µ–π
        customerId: customers[4]?.id || pmUser.id,
        pmId: pmUser.id,
        teamMembers: executors.slice(3, 7).map(e => e.id),
        technologies: ['React', 'Express.js', 'MongoDB', 'Redis'],
        category: 'web-development'
      }
    ];

    console.log(`Creating ${projectsToCreate.length} projects...`);

    const createdProjects = [];
    for (const projectData of projectsToCreate) {
      try {
        const projectRef = await db.collection('projects').add({
          ...projectData,
          createdAt: new Date(),
          updatedAt: new Date()
        });

        createdProjects.push({
          id: projectRef.id,
          ...projectData
        });

        console.log(`‚úÖ Created project: ${projectData.title}`);
      } catch (error) {
        console.error(`‚ùå Error creating project ${projectData.title}:`, error.message);
      }
    }

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüì± Creating chats for projects...');

    for (const project of createdProjects) {
      try {
        // 1. –ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞
        const teamChatRef = await db.collection('projects')
          .doc(project.id)
          .collection('chats')
          .add({
            name: `–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${project.title}`,
            type: 'group',
            participants: [project.pmId, ...project.teamMembers],
            createdBy: project.pmId,
            createdAt: new Date(),
            updatedAt: new Date(),
            isTeamChat: true
          });

        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —á–∞—Ç–µ
        await db.collection('projects')
          .doc(project.id)
          .collection('chats')
          .doc(teamChatRef.id)
          .collection('messages')
          .add({
            text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ "${project.title}"! üöÄ\n\n–î–∞–≤–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ! üí™`,
            senderId: project.pmId,
            timestamp: new Date(),
            readBy: [project.pmId],
            type: 'text'
          });

        // 2. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã PM —Å –∫–∞–∂–¥—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã
        for (const memberId of project.teamMembers) {
          const member = allUsers.find(u => u.id === memberId);
          if (member) {
            const privateChatRef = await db.collection('projects')
              .doc(project.id)
              .collection('chats')
              .add({
                name: `${pmUser.fullName} - ${member.fullName || member.displayName}`,
                type: 'direct',
                participants: [project.pmId, memberId],
                createdBy: project.pmId,
                createdAt: new Date(),
                updatedAt: new Date(),
                isPrivateChat: true
              });

            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
            await db.collection('projects')
              .doc(project.id)
              .collection('chats')
              .doc(privateChatRef.id)
              .collection('messages')
              .add({
                text: `–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.title}". –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –ø–∏—à–∏ —Å—é–¥–∞! üòä`,
                senderId: project.pmId,
                timestamp: new Date(),
                readBy: [project.pmId],
                type: 'text'
              });
          }
        }

        // 3. –ß–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º (–µ—Å–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫ –Ω–µ PM)
        if (project.customerId !== project.pmId) {
          const customer = allUsers.find(u => u.id === project.customerId);
          if (customer) {
            const customerChatRef = await db.collection('projects')
              .doc(project.id)
              .collection('chats')
              .add({
                name: `PM - –ó–∞–∫–∞–∑—á–∏–∫: ${project.title}`,
                type: 'direct',
                participants: [project.pmId, project.customerId],
                createdBy: project.pmId,
                createdAt: new Date(),
                updatedAt: new Date(),
                isCustomerChat: true
              });

            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
            await db.collection('projects')
              .doc(project.id)
              .collection('chats')
              .doc(customerChatRef.id)
              .collection('messages')
              .add({
                text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ —á–∞—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É "${project.title}". –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –æ–±—Å—É–∂–¥–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É. –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! üëã`,
                senderId: project.pmId,
                timestamp: new Date(),
                readBy: [project.pmId],
                type: 'text'
              });
          }
        }

        console.log(`‚úÖ Created chats for project: ${project.title}`);
      } catch (error) {
        console.error(`‚ùå Error creating chats for project ${project.title}:`, error.message);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–∫—Ä–∞–º-–¥–æ—Å–æ–∫
    console.log('\nüìã Creating scrum board columns...');

    const defaultColumns = [
      { name: '–ë—ç–∫–ª–æ–≥', order: 0, color: '#6B7280' },
      { name: '–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å', order: 1, color: '#3B82F6' },
      { name: '–í —Ä–∞–±–æ—Ç–µ', order: 2, color: '#F59E0B' },
      { name: '–ü—Ä–∞–≤–∫–∏', order: 3, color: '#EF4444' },
      { name: '–ì–æ—Ç–æ–≤–æ', order: 4, color: '#10B981' }
    ];

    for (const project of createdProjects) {
      for (const column of defaultColumns) {
        try {
          await db.collection('projects')
            .doc(project.id)
            .collection('columns')
            .add({
              ...column,
              createdAt: new Date(),
              updatedAt: new Date()
            });
        } catch (error) {
          console.error(`‚ùå Error creating column for project ${project.title}:`, error.message);
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∑–∞–¥–∞—á–∏
    console.log('\nüìù Creating demo tasks...');

    const demoTasks = [
      {
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–π',
        priority: 'high',
        status: '–ì–æ—Ç–æ–≤–æ',
        estimatedHours: 16,
        tags: ['setup', 'devops']
      },
      {
        title: '–î–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫–µ—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Figma',
        priority: 'high',
        status: '–ì–æ—Ç–æ–≤–æ',
        estimatedHours: 24,
        tags: ['design', 'ui/ux']
      },
      {
        title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Ö–æ–¥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è',
        priority: 'high',
        status: '–í —Ä–∞–±–æ—Ç–µ',
        estimatedHours: 32,
        tags: ['backend', 'auth']
      },
      {
        title: '–í–µ—Ä—Å—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤',
        description: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
        priority: 'medium',
        status: '–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å',
        estimatedHours: 40,
        tags: ['frontend', 'catalog']
      },
      {
        title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
        description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Stripe –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
        priority: 'medium',
        status: '–ë—ç–∫–ª–æ–≥',
        estimatedHours: 24,
        tags: ['backend', 'payments']
      }
    ];

    for (const project of createdProjects.slice(0, 3)) { // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø—Ä–æ–µ–∫—Ç–æ–≤
      for (let i = 0; i < demoTasks.length; i++) {
        const task = demoTasks[i];
        const assigneeId = project.teamMembers[i % project.teamMembers.length];

        try {
          await db.collection('projects')
            .doc(project.id)
            .collection('tasks')
            .add({
              ...task,
              assigneeId,
              projectId: project.id,
              createdBy: project.pmId,
              createdAt: new Date(),
              updatedAt: new Date(),
              dueDate: new Date(Date.now() + (7 + i * 3) * 24 * 60 * 60 * 1000) // —Ä–∞–∑–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã
            });
        } catch (error) {
          console.error(`‚ùå Error creating task for project ${project.title}:`, error.message);
        }
      }
      console.log(`‚úÖ Created ${demoTasks.length} tasks for project: ${project.title}`);
    }

    console.log('\nüéâ Successfully created PM projects and chats!');
    console.log('\nüìä Summary:');
    console.log(`- Projects created: ${createdProjects.length}`);
    console.log(`- Chats created: ~${createdProjects.length * 3} (team + private + customer chats)`);
    console.log(`- Tasks created: ${demoTasks.length * 3}`);
    console.log(`- Columns created: ${defaultColumns.length * createdProjects.length}`);

    console.log('\nüîë Login credentials:');
    console.log('Email: pm@mail.ru');
    console.log('Password: 123456');

  } catch (error) {
    console.error('‚ùå Error creating PM projects and chats:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  createPMProjectsAndChats()
    .then(() => {
      console.log('‚úÖ PM projects and chats creation completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script failed:', error);
      process.exit(1);
    });
}

module.exports = { createPMProjectsAndChats }; 