const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function debugAddMember() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è PM
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });

    const token = loginResponse.data.token;
    const headers = { Authorization: `Bearer ${token}` };

    console.log('‚úÖ PM –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã PM
    const teamsResponse = await axios.get(`${API_BASE}/teams`, { headers });
    const teams = teamsResponse.data;
    const firstTeam = teams[0];

    console.log(`üìã –ö–æ–º–∞–Ω–¥–∞: ${firstTeam.name} (ID: ${firstTeam.id})`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResponse = await axios.get(`${API_BASE}/teams/${firstTeam.id}/available-users`, { headers });
    const availableUsers = usersResponse.data;
    
    if (availableUsers.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }

    const testUser = availableUsers[0];
    console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.name} (ID: ${testUser.id})`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    console.log('\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:');
    try {
      const teamDetailsResponse = await axios.get(`${API_BASE}/teams/${firstTeam.id}`, { headers });
      const teamDetails = teamDetailsResponse.data;
      console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${(teamDetails.members || []).length}`);
      console.log(`   PM ID: ${teamDetails.pmId}`);
      console.log(`   Team Lead: ${teamDetails.teamLead || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–∞–Ω–¥—ã:', error.response?.data || error.message);
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n‚ûï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const addResponse = await axios.post(`${API_BASE}/teams/${firstTeam.id}/members`, {
        userId: testUser.id,
        role: 'developer'
      }, { headers });

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
      console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(addResponse.data, null, 2));
    } catch (addError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log('   –°—Ç–∞—Ç—É—Å:', addError.response?.status);
      console.log('   –î–∞–Ω–Ω—ã–µ:', JSON.stringify(addError.response?.data, null, 2));
      console.log('   –ó–∞–≥–æ–ª–æ–≤–∫–∏:', JSON.stringify(addError.response?.headers, null, 2));
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      if (addError.response?.status === 500) {
        console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞');
        console.log('   - –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å Firestore');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

debugAddMember(); 