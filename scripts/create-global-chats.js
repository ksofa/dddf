const { db } = require('../src/config/firebase');

async function createGlobalChats() {
  try {
    console.log('üöÄ Creating global chats...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersSnapshot = await db.collection('users').get();
    const users = [];
    
    usersSnapshot.forEach(doc => {
      const userData = doc.data();
      users.push({
        id: doc.id,
        ...userData
      });
    });

    console.log(`Found ${users.length} users`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    const adminUsers = users.filter(u => u.roles?.includes('admin'));
    const pmUsers = users.filter(u => u.roles?.includes('pm'));
    const executorUsers = users.filter(u => u.roles?.includes('executor'));
    const customerUsers = users.filter(u => u.roles?.includes('customer'));

    console.log(`Admins: ${adminUsers.length}, PMs: ${pmUsers.length}, Executors: ${executorUsers.length}, Customers: ${customerUsers.length}`);

    const chatsToCreate = [];

    // 1. –ß–∞—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    if (adminUsers.length > 1) {
      chatsToCreate.push({
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã',
        type: 'group',
        participants: adminUsers.map(u => u.id),
        createdBy: adminUsers[0].id,
        isGlobal: true,
        description: '–û–±—â–∏–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'
      });
    }

    // 2. –ß–∞—Ç –≤—Å–µ—Ö PM
    if (pmUsers.length > 1) {
      chatsToCreate.push({
        name: '–ü—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä—ã',
        type: 'group',
        participants: pmUsers.map(u => u.id),
        createdBy: pmUsers[0].id,
        isGlobal: true,
        description: '–û–±—â–∏–π —á–∞—Ç –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
      });
    }

    // 3. –ß–∞—Ç –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if (executorUsers.length > 1) {
      chatsToCreate.push({
        name: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏',
        type: 'group',
        participants: executorUsers.map(u => u.id),
        createdBy: executorUsers[0].id,
        isGlobal: true,
        description: '–û–±—â–∏–π —á–∞—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π'
      });
    }

    // 4. –û–±—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã (–≤—Å–µ —Ä–æ–ª–∏ –∫—Ä–æ–º–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤)
    const teamUsers = [...adminUsers, ...pmUsers, ...executorUsers];
    if (teamUsers.length > 1) {
      chatsToCreate.push({
        name: '–û–±—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã',
        type: 'group',
        participants: teamUsers.map(u => u.id),
        createdBy: adminUsers[0]?.id || pmUsers[0]?.id,
        isGlobal: true,
        description: '–û–±—â–∏–π —á–∞—Ç –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã'
      });
    }

    // 5. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∞–º–∏ –∏ PM
    for (const admin of adminUsers) {
      for (const pm of pmUsers) {
        if (admin.id !== pm.id) {
          chatsToCreate.push({
            name: `${admin.displayName || admin.fullName} - ${pm.displayName || pm.fullName}`,
            type: 'direct',
            participants: [admin.id, pm.id],
            createdBy: admin.id,
            isGlobal: true,
            description: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∞–¥–º–∏–Ω–∞ –∏ PM'
          });
        }
      }
    }

    // 6. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã –º–µ–∂–¥—É PM –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ (–ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –¥–µ–º–æ)
    for (const pm of pmUsers) {
      for (let i = 0; i < Math.min(3, executorUsers.length); i++) {
        const executor = executorUsers[i];
        if (pm.id !== executor.id) {
          chatsToCreate.push({
            name: `${pm.displayName || pm.fullName} - ${executor.displayName || executor.fullName}`,
            type: 'direct',
            participants: [pm.id, executor.id],
            createdBy: pm.id,
            isGlobal: true,
            description: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç PM –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
          });
        }
      }
    }

    // 7. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ (–ø–µ—Ä–≤—ã–µ 5 –ø–∞—Ä –¥–ª—è –¥–µ–º–æ)
    for (let i = 0; i < Math.min(5, executorUsers.length); i++) {
      for (let j = i + 1; j < Math.min(i + 3, executorUsers.length); j++) {
        const executor1 = executorUsers[i];
        const executor2 = executorUsers[j];
        chatsToCreate.push({
          name: `${executor1.displayName || executor1.fullName} - ${executor2.displayName || executor2.fullName}`,
          type: 'direct',
          participants: [executor1.id, executor2.id],
          createdBy: executor1.id,
          isGlobal: true,
          description: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏'
        });
      }
    }

    console.log(`Creating ${chatsToCreate.length} global chats...`);

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç—ã
    let createdCount = 0;
    for (const chatData of chatsToCreate) {
      try {
        const chatRef = await db.collection('global-chats').add({
          ...chatData,
          createdAt: new Date(),
          updatedAt: new Date()
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await db.collection('global-chats')
          .doc(chatRef.id)
          .collection('messages')
          .add({
            text: chatData.type === 'group' 
              ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${chatData.name}! üëã`
              : '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üëã',
            senderId: chatData.createdBy,
            timestamp: new Date(),
            readBy: [chatData.createdBy],
            type: 'text'
          });

        createdCount++;
        console.log(`‚úÖ Created chat: ${chatData.name}`);
      } catch (error) {
        console.error(`‚ùå Error creating chat ${chatData.name}:`, error.message);
      }
    }

    console.log(`\nüéâ Successfully created ${createdCount} global chats!`);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä Chat Statistics:');
    console.log(`- Group chats: ${chatsToCreate.filter(c => c.type === 'group').length}`);
    console.log(`- Direct chats: ${chatsToCreate.filter(c => c.type === 'direct').length}`);
    console.log(`- Total participants: ${new Set(chatsToCreate.flatMap(c => c.participants)).size}`);

  } catch (error) {
    console.error('‚ùå Error creating global chats:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  createGlobalChats()
    .then(() => {
      console.log('‚úÖ Global chats creation completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script failed:', error);
      process.exit(1);
    });
}

module.exports = { createGlobalChats }; 