const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n')
    })
  });
}

const db = admin.firestore();

async function createTestTasks() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...');

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
    const projectsSnapshot = await db.collection('projects').limit(3).get();
    const projects = [];
    projectsSnapshot.forEach(doc => {
      projects.push({ id: doc.id, ...doc.data() });
    });

    if (projects.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const usersSnapshot = await db.collection('users').where('roles', 'array-contains', 'executor').limit(5).get();
    const executors = [];
    usersSnapshot.forEach(doc => {
      executors.push({ id: doc.id, ...doc.data() });
    });

    if (executors.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º PM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const pmSnapshot = await db.collection('users').where('roles', 'array-contains', 'pm').limit(2).get();
    const pms = [];
    pmSnapshot.forEach(doc => {
      pms.push({ id: doc.id, ...doc.data() });
    });

    const testTasks = [
      {
        title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        description: '–°–æ–∑–¥–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º',
        status: 'todo',
        priority: 'high',
        assignedTo: executors[0]?.id || 'test-executor-1',
        projectId: projects[0]?.id || 'test-project-1',
        createdBy: pms[0]?.id || 'test-pm-1',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // +7 –¥–Ω–µ–π
      },
      {
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        description: '–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
        status: 'in_progress',
        priority: 'medium',
        assignedTo: executors[1]?.id || 'test-executor-2',
        projectId: projects[0]?.id || 'test-project-1',
        createdBy: pms[0]?.id || 'test-pm-1',
        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // -2 –¥–Ω—è
        updatedAt: new Date().toISOString(),
        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString() // +5 –¥–Ω–µ–π
      },
      {
        title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
        status: 'review',
        priority: 'high',
        assignedTo: executors[2]?.id || 'test-executor-3',
        projectId: projects[1]?.id || 'test-project-2',
        createdBy: pms[0]?.id || 'test-pm-1',
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // -5 –¥–Ω–µ–π
        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // -1 –¥–µ–Ω—å
        dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString() // +2 –¥–Ω—è
      },
      {
        title: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        description: '–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã',
        status: 'done',
        priority: 'low',
        assignedTo: executors[3]?.id || 'test-executor-4',
        projectId: projects[1]?.id || 'test-project-2',
        createdBy: pms[1]?.id || 'test-pm-2',
        createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // -10 –¥–Ω–µ–π
        updatedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // -3 –¥–Ω—è
        dueDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString() // -1 –¥–µ–Ω—å (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, –Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
      },
      {
        title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        status: 'todo',
        priority: 'medium',
        assignedTo: executors[0]?.id || 'test-executor-1',
        projectId: projects[2]?.id || 'test-project-3',
        createdBy: pms[1]?.id || 'test-pm-2',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString() // +14 –¥–Ω–µ–π
      },
      {
        title: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤',
        description: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        status: 'todo',
        priority: 'high',
        assignedTo: executors[1]?.id || 'test-executor-2',
        projectId: projects[0]?.id || 'test-project-1',
        createdBy: pms[0]?.id || 'test-pm-1',
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // -1 –¥–µ–Ω—å
        updatedAt: new Date().toISOString(),
        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString() // +3 –¥–Ω—è
      },
      {
        title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
        description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –≤–Ω–µ—à–Ω–∏–º–∏ API',
        status: 'in_progress',
        priority: 'medium',
        assignedTo: executors[2]?.id || 'test-executor-3',
        projectId: projects[2]?.id || 'test-project-3',
        createdBy: pms[1]?.id || 'test-pm-2',
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // -3 –¥–Ω—è
        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // -1 –¥–µ–Ω—å
        dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString() // +10 –¥–Ω–µ–π
      },
      {
        title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞',
        description: '–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è',
        status: 'todo',
        priority: 'high',
        assignedTo: executors[3]?.id || 'test-executor-4',
        projectId: projects[1]?.id || 'test-project-2',
        createdBy: pms[0]?.id || 'test-pm-1',
        createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // -7 –¥–Ω–µ–π
        updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // -2 –¥–Ω—è
        dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString() // -2 –¥–Ω—è (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)
      }
    ];

    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ ${testTasks.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...`);

    for (const taskData of testTasks) {
      const docRef = await db.collection('tasks').add(taskData);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${taskData.title} (ID: ${docRef.id})`);
    }

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const tasksByStatus = testTasks.reduce((acc, task) => {
      acc[task.status] = (acc[task.status] || 0) + 1;
      return acc;
    }, {});

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:');
    Object.entries(tasksByStatus).forEach(([status, count]) => {
      const statusLabels = {
        todo: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
        in_progress: '–í —Ä–∞–±–æ—Ç–µ',
        review: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        done: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
      };
      console.log(`   ${statusLabels[status]}: ${count}`);
    });

    console.log(`\nüèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏:`);
    projects.forEach(project => {
      const projectTasks = testTasks.filter(task => task.projectId === project.id);
      console.log(`   ${project.title}: ${projectTasks.length} –∑–∞–¥–∞—á`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createTestTasks().then(() => {
  console.log('\n‚ú® –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 