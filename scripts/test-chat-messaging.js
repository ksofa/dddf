const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function testChatMessaging() {
  try {
    // 1. –õ–æ–≥–∏–Ω PM
    console.log('üîê –õ–æ–≥–∏–Ω PM...');
    const pmLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });
    const pmToken = pmLoginResponse.data.token;
    console.log('‚úÖ PM –∑–∞–ª–æ–≥–∏–Ω–µ–Ω');

    // 2. –õ–æ–≥–∏–Ω Executor
    console.log('\nüîê –õ–æ–≥–∏–Ω Executor...');
    const executorLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'executor5@test.test',
      password: 'password123'
    });
    const executorToken = executorLoginResponse.data.token;
    console.log('‚úÖ Executor –∑–∞–ª–æ–≥–∏–Ω–µ–Ω');

    // 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM
    console.log('\nüìã –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM...');
    const projectsResponse = await axios.get(`${BASE_URL}/projects`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    const project = projectsResponse.data[0];
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç: ${project.title} (${project.id})`);

    // 4. –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüí¨ –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    const chatsResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    
    let testChat = chatsResponse.data[0];
    if (!testChat) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç...');
      const createChatResponse = await axios.post(`${BASE_URL}/projects/${project.id}/chats`, {
        name: 'Test Messaging Chat',
        type: 'group',
        participants: ['QH040Apx3segNZ9zHJrLP8y4UPD2']
      }, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      testChat = createChatResponse.data.chat;
    }
    
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç: ${testChat.name} (${testChat.id})`);

    // 5. PM –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('\nüì§ PM –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    const pmMessageResponse = await axios.post(`${BASE_URL}/projects/${project.id}/chats/${testChat.id}/messages`, {
      text: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PM',
      type: 'text'
    }, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', pmMessageResponse.data.message);

    // 6. Executor –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('\nüì§ Executor –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    const executorMessageResponse = await axios.post(`${BASE_URL}/projects/${project.id}/chats/${testChat.id}/messages`, {
      text: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç Executor',
      type: 'text'
    }, {
      headers: { Authorization: `Bearer ${executorToken}` }
    });
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Executor –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', executorMessageResponse.data.message);

    // 7. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ (PM)
    console.log('\nüì® PM –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞...');
    const pmMessagesResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats/${testChat.id}/messages`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${pmMessagesResponse.data.length} —Å–æ–æ–±—â–µ–Ω–∏–π:`);
    pmMessagesResponse.data.forEach((msg, index) => {
      console.log(`${index + 1}. [${msg.sender?.name || 'Unknown'}]: ${msg.text}`);
    });

    // 8. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ (Executor)
    console.log('\nüì® Executor –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞...');
    const executorMessagesResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats/${testChat.id}/messages`, {
      headers: { Authorization: `Bearer ${executorToken}` }
    });
    console.log(`‚úÖ Executor –≤–∏–¥–∏—Ç ${executorMessagesResponse.data.length} —Å–æ–æ–±—â–µ–Ω–∏–π:`);
    executorMessagesResponse.data.forEach((msg, index) => {
      console.log(`${index + 1}. [${msg.sender?.name || 'Unknown'}]: ${msg.text}`);
    });

    // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...');
    const updatedChatsResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${updatedChatsResponse.data.length} —á–∞—Ç–æ–≤:`);
    updatedChatsResponse.data.forEach((chat, index) => {
      const lastMsg = chat.lastMessage;
      console.log(`${index + 1}. ${chat.name} - –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${lastMsg ? `"${lastMsg.text}" –æ—Ç ${lastMsg.sender?.name}` : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}`);
    });

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP Status: ${error.response.status}`);
    }
  }
}

testChatMessaging(); 