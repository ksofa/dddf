const { db } = require('../src/config/firebase');

async function createTestChats() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç project-1
    const projectDoc = await db.collection('projects').doc('project-1').get();
    if (!projectDoc.exists) {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç project-1 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const projectData = projectDoc.data();
    console.log('üìã –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:', projectData.title);
    console.log('üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', projectData.teamMembers);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç—ã
    const existingChatsSnapshot = await db.collection('projects')
      .doc('project-1')
      .collection('chats')
      .get();

    if (!existingChatsSnapshot.empty) {
      console.log('üí¨ –ß–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ...');
      const batch = db.batch();
      existingChatsSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      await batch.commit();
    }

    const teamMembers = projectData.teamMembers || [];
    const pmId = projectData.manager || projectData.pmId;

    if (teamMembers.length === 0) {
      console.log('‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–æ–≤');
      return;
    }

    // 1. –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    console.log('üí¨ –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã...');
    const teamChatData = {
      name: `–û–±—â–∏–π —á–∞—Ç - ${projectData.title}`,
      type: 'group',
      participants: teamMembers,
      createdBy: pmId,
      createdAt: new Date(),
      updatedAt: new Date(),
      isTeamChat: true
    };

    const teamChatRef = await db.collection('projects')
      .doc('project-1')
      .collection('chats')
      .add(teamChatData);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—â–∏–π —á–∞—Ç: ${teamChatRef.id}`);

    // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã PM —Å –∫–∞–∂–¥—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if (pmId) {
      console.log('üí¨ –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã PM —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...');
      
      for (const memberId of teamMembers) {
        if (memberId !== pmId) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ
          const memberDoc = await db.collection('users').doc(memberId).get();
          const memberData = memberDoc.exists ? memberDoc.data() : null;
          const memberName = memberData ? (memberData.displayName || memberData.fullName || '–£—á–∞—Å—Ç–Ω–∏–∫') : '–£—á–∞—Å—Ç–Ω–∏–∫';

          const privateChatData = {
            name: `–ß–∞—Ç —Å ${memberName}`,
            type: 'direct',
            participants: [pmId, memberId],
            createdBy: pmId,
            createdAt: new Date(),
            updatedAt: new Date(),
            isPrivateChat: true
          };

          const privateChatRef = await db.collection('projects')
            .doc('project-1')
            .collection('chats')
            .add(privateChatData);

          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å ${memberName}: ${privateChatRef.id}`);
        }
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ
    console.log('üí¨ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    const testMessages = [
      {
        text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞!',
        senderId: pmId,
        timestamp: new Date(Date.now() - 3600000), // 1 —á–∞—Å –Ω–∞–∑–∞–¥
        type: 'text',
        readBy: [pmId]
      },
      {
        text: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üí™',
        senderId: teamMembers[1] || teamMembers[0],
        timestamp: new Date(Date.now() - 1800000), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        type: 'text',
        readBy: [teamMembers[1] || teamMembers[0]]
      },
      {
        text: '–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é',
        senderId: pmId,
        timestamp: new Date(Date.now() - 900000), // 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        type: 'text',
        readBy: [pmId]
      }
    ];

    for (const messageData of testMessages) {
      await db.collection('projects')
        .doc('project-1')
        .collection('chats')
        .doc(teamChatRef.id)
        .collection('messages')
        .add(messageData);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    await db.collection('projects')
      .doc('project-1')
      .collection('chats')
      .doc(teamChatRef.id)
      .update({
        lastMessage: testMessages[testMessages.length - 1].text,
        lastMessageAt: testMessages[testMessages.length - 1].timestamp,
        lastMessageBy: testMessages[testMessages.length - 1].senderId,
        updatedAt: new Date()
      });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –û–±—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã: 1`);
    console.log(`   - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã: ${teamMembers.length - 1}`);
    console.log(`   - –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${testMessages.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createTestChats().then(() => {
  console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 