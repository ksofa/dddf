const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function testPMAccess() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ PM –∫ –∫–æ–º–∞–Ω–¥–∞–º\n');

  try {
    // –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ PM
    console.log('1Ô∏è‚É£ –õ–æ–≥–∏–Ω –∫–∞–∫ PM...');
    const loginResponse = await axios.post(`${API_BASE}/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });
    
    const pmToken = loginResponse.data.token;
    console.log('‚úÖ PM —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã PM
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ PM...');
    const teamsResponse = await axios.get(`${API_BASE}/teams`, {
      headers: {
        'Authorization': `Bearer ${pmToken}`
      }
    });
    
    console.log(`‚úÖ PM –≤–∏–¥–∏—Ç ${teamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–º—É PM
    const pmUserId = loginResponse.data.user.uid;
    console.log(`PM ID: ${pmUserId}`);
    
    const pmTeams = teamsResponse.data.filter(team => team.pmId === pmUserId);
    console.log(`‚úÖ –ò–∑ –Ω–∏—Ö ${pmTeams.length} –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç PM`);
    
    if (pmTeams.length === teamsResponse.data.length) {
      console.log('‚úÖ PM –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã - –ö–û–†–†–ï–ö–¢–ù–û\n');
    } else {
      console.log('‚ùå PM –≤–∏–¥–∏—Ç —á—É–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã - –û–®–ò–ë–ö–ê');
      console.log('–ö–æ–º–∞–Ω–¥—ã PM:', teamsResponse.data.map(team => ({
        id: team.id,
        name: team.name,
        pmId: team.pmId,
        belongsToCurrentPM: team.pmId === pmUserId
      })));
    }

    // –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('3Ô∏è‚É£ –õ–æ–≥–∏–Ω –∫–∞–∫ –∞–¥–º–∏–Ω...');
    const adminLoginResponse = await axios.post(`${API_BASE}/login`, {
      email: 'admin@admin.admin',
      password: 'admin123'
    });
    
    const adminToken = adminLoginResponse.data.token;
    console.log('‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
    console.log('4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞...');
    const adminTeamsResponse = await axios.get(`${API_BASE}/teams`, {
      headers: {
        'Authorization': `Bearer ${adminToken}`
      }
    });
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç ${adminTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    console.log('‚úÖ –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã - –ö–û–†–†–ï–ö–¢–ù–û\n');

    console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:');
    console.log(`PM –≤–∏–¥–∏—Ç: ${teamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    console.log(`–ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç: ${adminTeamsResponse.data.length} –∫–æ–º–∞–Ω–¥`);
    
    if (teamsResponse.data.length < adminTeamsResponse.data.length) {
      console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - PM –≤–∏–¥–∏—Ç –º–µ–Ω—å—à–µ –∫–æ–º–∞–Ω–¥ —á–µ–º –∞–¥–º–∏–Ω');
    } else {
      console.log('‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testPMAccess(); 