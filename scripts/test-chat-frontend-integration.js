const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function testChatFrontendIntegration() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ frontend-backend –¥–ª—è —á–∞—Ç–æ–≤...\n');

    // 1. –õ–æ–≥–∏–Ω PM
    console.log('1Ô∏è‚É£ –õ–æ–≥–∏–Ω PM...');
    const pmLoginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'pm@test.test',
      password: 'password123'
    });
    const pmToken = pmLoginResponse.data.token;
    console.log('‚úÖ PM –∑–∞–ª–æ–≥–∏–Ω–µ–Ω');

    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç frontend)
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã PM...');
    const projectsResponse = await axios.get(`${BASE_URL}/projects`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    const project = projectsResponse.data[0];
    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${project.title} (${project.id})`);

    // 3. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...');
    const membersResponse = await axios.get(`${BASE_URL}/projects/${project.id}/members`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: ${membersResponse.data.length}`);
    membersResponse.data.forEach((member, index) => {
      console.log(`   ${index + 1}. ${member.name} (${member.email}) - ${member.roles?.join(', ')}`);
    });

    // 4. –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    const chatsResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`‚úÖ –ß–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${chatsResponse.data.length}`);
    
    if (chatsResponse.data.length > 0) {
      const chat = chatsResponse.data[0];
      console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç: ${chat.name} (${chat.id})`);
      console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chat.participants.length}`);
      
      // 5. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
      console.log('\n5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞...');
      const messagesResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats/${chat.id}/messages`, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: ${messagesResponse.data.length}`);
      
      if (messagesResponse.data.length > 0) {
        console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è:');
        messagesResponse.data.slice(0, 3).forEach((msg, index) => {
          console.log(`   ${index + 1}. [${msg.sender?.name || 'Unknown'}]: ${msg.text}`);
        });
      }
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n6Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞...');
    const availableMembers = membersResponse.data.filter(m => m.id !== pmToken.split('.')[1]); // –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è
    if (availableMembers.length > 0) {
      const participantIds = availableMembers.slice(0, 2).map(m => m.id); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö 2 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      
      const createChatResponse = await axios.post(`${BASE_URL}/projects/${project.id}/chats`, {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞',
        type: 'group',
        participants: participantIds
      }, {
        headers: { Authorization: `Bearer ${pmToken}` }
      });
      
      console.log('‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:', createChatResponse.data.message);
      console.log(`   ID —á–∞—Ç–∞: ${createChatResponse.data.chatId}`);
      
      if (createChatResponse.data.chat) {
        console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–æ–≤–æ–º —á–∞—Ç–µ: ${createChatResponse.data.chat.participants.length}`);
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...');
    const updatedChatsResponse = await axios.get(`${BASE_URL}/projects/${project.id}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: ${updatedChatsResponse.data.length}`);

    // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ frontend)
    console.log('\n8Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const allChatsResponse = await axios.get(`${BASE_URL}/chats`, {
      headers: { Authorization: `Bearer ${pmToken}` }
    });
    console.log(`‚úÖ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${allChatsResponse.data.length}`);
    
    const projectChats = allChatsResponse.data.filter(c => !c.isGlobal);
    const globalChats = allChatsResponse.data.filter(c => c.isGlobal);
    console.log(`   - –ü—Ä–æ–µ–∫—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤: ${projectChats.length}`);
    console.log(`   - –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: ${globalChats.length}`);

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ frontend-backend –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –ò—Ç–æ–≥–∏:');
    console.log(`   - –ü—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: ${projectsResponse.data.length}`);
    console.log(`   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${membersResponse.data.length}`);
    console.log(`   - –ß–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: ${updatedChatsResponse.data.length}`);
    console.log(`   - –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${allChatsResponse.data.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.response?.data || error.message);
    if (error.response?.status) {
      console.error(`HTTP Status: ${error.response.status}`);
    }
  }
}

testChatFrontendIntegration(); 