// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const https = require('https');

const API_URL = 'https://dddf-1.onrender.com/api';

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
console.log('üåê API URL:', API_URL);

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
const testConnection = () => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'dddf-1.onrender.com',
      port: 443,
      path: '/api/health',
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          body: data
        });
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.end();
  });
};

// –¢–µ—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
const testInvitations = () => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'dddf-1.onrender.com',
      port: 443,
      path: '/api/invitations?status=pending',
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          body: data
        });
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.end();
  });
};

async function runTests() {
  try {
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');
    const healthResult = await testConnection();
    console.log('‚úÖ Health check:', healthResult.status);
    
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...');
    const invitationsResult = await testInvitations();
    console.log('üì® Invitations:', invitationsResult.status);
    
    if (invitationsResult.status === 401) {
      console.log('‚ÑπÔ∏è  401 - –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
    } else if (invitationsResult.status === 200) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', invitationsResult.status);
      console.log('–û—Ç–≤–µ—Ç:', invitationsResult.body.substring(0, 200));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

runTests(); 