// API Configuration
const isProduction = import.meta.env.PROD || 
                    import.meta.env.MODE === 'production' || 
                    window.location.hostname !== 'localhost';

const API_BASE_URL = isProduction
  ? 'https://dddf-1.onrender.com/api'
  : 'http://localhost:3000/api';

console.log('üåç Environment:', {
  'import.meta.env.PROD': import.meta.env.PROD,
  'import.meta.env.MODE': import.meta.env.MODE,
  'window.location.hostname': window.location.hostname,
  'isProduction': isProduction,
  'API_BASE_URL': API_BASE_URL
});

export { API_BASE_URL };

// Axios instance configuration
import axios from 'axios';
import { auth } from '../config/firebase';

export const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Export as 'api' for convenience
export const api = apiClient;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
const getValidToken = async (): Promise<string | null> => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    const storedToken = localStorage.getItem('authToken');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Firebase, –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —Ç–æ–∫–µ–Ω
    if (auth.currentUser) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Firebase...');
      const freshToken = await auth.currentUser.getIdToken(true); // force refresh
      localStorage.setItem('authToken', freshToken);
      console.log('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
      return freshToken;
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if (storedToken) {
      console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω');
      return storedToken;
    }
    
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    return localStorage.getItem('authToken');
  }
};

// Request interceptor to add auth token
apiClient.interceptors.request.use(
  async (config) => {
    const token = await getValidToken();
    console.log('API Request:', config.method?.toUpperCase(), config.url);
    console.log('Auth token:', token ? 'Present' : 'Missing');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
apiClient.interceptors.response.use(
  (response) => {
    console.log('API Response:', response.status, response.config.url);
    return response;
  },
  async (error) => {
    console.error('API Error:', error.response?.status, error.response?.data, error.config?.url);
    
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    if (error.response?.status === 401 && !error.config._retry) {
      console.log('üîÑ –ü–æ–ª—É—á–∏–ª–∏ 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...');
      error.config._retry = true;
      
      try {
        const freshToken = await getValidToken();
        if (freshToken) {
          error.config.headers.Authorization = `Bearer ${freshToken}`;
          console.log('üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
          return apiClient.request(error.config);
        }
      } catch (refreshError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:', refreshError);
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      localStorage.removeItem('authToken');
      localStorage.removeItem('user');
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
); 