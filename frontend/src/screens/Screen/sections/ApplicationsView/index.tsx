import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../../../../components/ui/card';
import { Button } from '../../../../components/ui/button';
import { Badge } from '../../../../components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../../../components/ui/select';
import { useAuth } from '../../../../hooks/useAuth';
import { apiClient } from '../../../../api/config';

interface Application {
  id: string;
  projectTitle: string;
  projectDescription: string;
  fullName: string;
  phone: string;
  email?: string;
  rate?: string;
  startDate?: string;
  estimatedDuration?: number;
  estimatedDurationUnit?: string;
  coverLetter?: string;
  techSpec?: string;
  techSpecFile?: {
    originalName: string;
    size: number;
    path: string;
  };
  status: 'pending' | 'approved' | 'rejected';
  createdAt: any;
  approvedAt?: any;
  rejectedAt?: any;
  rejectionReason?: string;
  assignedPM?: string;
  projectId?: string;
}

interface User {
  id: string;
  uid?: string;
  displayName: string;
  email: string;
  roles: string[];
}

export const ApplicationsView = () => {
  const { user } = useAuth();
  const [applications, setApplications] = useState<Application[]>([]);
  const [projectManagers, setProjectManagers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedPMs, setSelectedPMs] = useState<{ [key: string]: string }>({});
  const [processingIds, setProcessingIds] = useState<Set<string>>(new Set());
  const [statusFilter, setStatusFilter] = useState<string>('all');

  useEffect(() => {
    if (user?.roles?.includes('admin')) {
      loadApplications();
      loadProjectManagers();
    }
  }, [user]);

  const loadApplications = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ Loading applications...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const timestamp = new Date().getTime();
      const response = await apiClient.get(`/applications?_t=${timestamp}`, {
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
      console.log('‚úÖ Applications loaded:', response.data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
      if (Array.isArray(response.data)) {
        setApplications(response.data);
        console.log('üìä Applications count:', response.data.length);
      } else {
        console.warn('‚ö†Ô∏è Invalid applications data format:', response.data);
        setApplications([]);
      }
    } catch (error: any) {
      console.error('‚ùå Error loading applications:', error);
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫: ${error.response?.data?.message || error.message}`);
      setApplications([]); // –û—á–∏—â–∞–µ–º –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setLoading(false);
    }
  };

  const loadProjectManagers = async () => {
    try {
      console.log('üîÑ Loading project managers...');
      const response = await apiClient.get('/users', {
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
      const pms = response.data.filter((user: User) => user.roles?.includes('pm'));
      console.log('‚úÖ Project managers loaded:', pms.length);
      setProjectManagers(pms);
    } catch (error: any) {
      console.error('‚ùå Error loading project managers:', error);
    }
  };

  const handleApprove = async (applicationId: string) => {
    const pmId = selectedPMs[applicationId];
    if (!pmId) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞');
      return;
    }

    try {
      setProcessingIds(prev => new Set(prev).add(applicationId));
      console.log('üîÑ Approving application:', applicationId, 'with PM:', pmId);
      
      await apiClient.post(`/applications/${applicationId}/approve`, { pmId });
      
      console.log('‚úÖ Application approved successfully');
      alert('–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏
      await loadApplications();
      
      // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ PM
      setSelectedPMs(prev => {
        const newState = { ...prev };
        delete newState[applicationId];
        return newState;
      });
    } catch (error: any) {
      console.error('‚ùå Error approving application:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ${error.response?.data?.message || error.message}`);
    } finally {
      setProcessingIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(applicationId);
        return newSet;
      });
    }
  };

  const handleReject = async (applicationId: string) => {
    const reason = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):');
    
    try {
      setProcessingIds(prev => new Set(prev).add(applicationId));
      console.log('üîÑ Rejecting application:', applicationId);
      
      await apiClient.post(`/applications/${applicationId}/reject`, { reason });
      
      console.log('‚úÖ Application rejected successfully');
      alert('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏
      await loadApplications();
    } catch (error: any) {
      console.error('‚ùå Error rejecting application:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ${error.response?.data?.message || error.message}`);
    } finally {
      setProcessingIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(applicationId);
        return newSet;
      });
    }
  };

  const formatDate = (timestamp: any) => {
    if (!timestamp) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    try {
      const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-orange-100 text-orange-800';
      case 'approved': return 'bg-green-100 text-green-800';
      case 'rejected': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'approved': return '–û–¥–æ–±—Ä–µ–Ω–∞';
      case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞';
      default: return status;
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
  const filteredApplications = applications.filter(app => {
    if (statusFilter === 'all') return true;
    return app.status === statusFilter;
  });

  if (!user?.roles?.includes('admin')) {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-semibold text-gray-900 mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
        <p className="text-gray-600">–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏</p>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="flex items-center gap-3">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center gap-3">
            <svg className="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p className="text-red-600 font-medium">{error}</p>
          </div>
          <Button 
            onClick={loadApplications}
            variant="outline"
            size="sm"
            className="mt-3 text-red-600 border-red-300 hover:bg-red-50"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">–ó–∞—è–≤–∫–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤</h1>
            <p className="text-gray-600 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
          </div>
          <div className="flex gap-3">
            <Button 
              onClick={loadApplications}
              variant="outline"
              disabled={loading}
              className="flex items-center gap-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
            </Button>
          </div>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="sm:w-48">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
              </label>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</SelectItem>
                  <SelectItem value="pending">–û–∂–∏–¥–∞—é—â–∏–µ</SelectItem>
                  <SelectItem value="approved">–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ</SelectItem>
                  <SelectItem value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end">
              <div className="text-sm text-gray-600">
                –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <span className="font-medium">{applications.length}</span>
                {statusFilter !== 'all' && (
                  <span> | –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: <span className="font-medium">{filteredApplications.length}</span></span>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ */}
        {filteredApplications.length === 0 ? (
          <div className="text-center py-12">
            <svg className="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {statusFilter === 'all' ? '–ù–µ—Ç –∑–∞—è–≤–æ–∫' : `–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${getStatusText(statusFilter)}"`}
            </h3>
            <p className="text-gray-500">–ó–∞—è–≤–∫–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
          </div>
        ) : (
          <div className="space-y-6">
            {filteredApplications.map((application) => (
              <Card key={application.id} className="shadow-sm border border-gray-200">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-xl mb-2">{application.projectTitle}</CardTitle>
                      <div className="flex items-center gap-3">
                        <Badge className={getStatusColor(application.status)}>
                          {getStatusText(application.status)}
                        </Badge>
                        <span className="text-sm text-gray-500">
                          –ü–æ–¥–∞–Ω–∞: {formatDate(application.createdAt)}
                        </span>
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <div className="space-y-4">
                      <div>
                        <h4 className="font-medium text-gray-900 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ</h4>
                        <div className="space-y-1 text-sm">
                          <p><span className="font-medium">–§–ò–û:</span> {application.fullName}</p>
                          <p><span className="font-medium">–¢–µ–ª–µ—Ñ–æ–Ω:</span> {application.phone}</p>
                          {application.email && (
                            <p><span className="font-medium">Email:</span> {application.email}</p>
                          )}
                        </div>
                      </div>

                      <div>
                        <h4 className="font-medium text-gray-900 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h4>
                        <p className="text-sm text-gray-700">{application.projectDescription}</p>
                      </div>

                      {application.techSpec && (
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h4>
                          <p className="text-sm text-gray-700">{application.techSpec}</p>
                        </div>
                      )}

                      {application.coverLetter && (
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</h4>
                          <p className="text-sm text-gray-700">{application.coverLetter}</p>
                        </div>
                      )}
                    </div>

                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                    <div className="space-y-4">
                      {/* –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ */}
                      <div>
                        <h4 className="font-medium text-gray-900 mb-2">–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞</h4>
                        <div className="space-y-1 text-sm">
                          {application.rate && (
                            <p><span className="font-medium">–û–ø–ª–∞—Ç–∞:</span> {application.rate}</p>
                          )}
                          {application.startDate && (
                            <p><span className="font-medium">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</span> {new Date(application.startDate).toLocaleDateString('ru-RU')}</p>
                          )}
                          {application.estimatedDuration && (
                            <p><span className="font-medium">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span> {application.estimatedDuration} {application.estimatedDurationUnit || '–¥–Ω–µ–π'}</p>
                          )}
                        </div>
                      </div>

                      {/* –§–∞–π–ª –¢–ó */}
                      {application.techSpecFile && (
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª</h4>
                          <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-lg">
                            <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <div className="flex-1">
                              <p className="text-sm font-medium">{application.techSpecFile.originalName}</p>
                              <p className="text-xs text-gray-500">{Math.round(application.techSpecFile.size / 1024)} KB</p>
                            </div>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => window.open(`/api/applications/${application.id}/tech-spec-file`, '_blank')}
                            >
                              –°–∫–∞—á–∞—Ç—å
                            </Button>
                          </div>
                        </div>
                      )}

                      {/* –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ */}
                      {application.status === 'pending' && (
                        <div>
                          <h4 className="font-medium text-gray-900 mb-3">–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞</h4>
                          <div className="space-y-3">
                            <Select 
                              value={selectedPMs[application.id] || ''} 
                              onValueChange={(value) => setSelectedPMs(prev => ({ ...prev, [application.id]: value }))}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ PM" />
                              </SelectTrigger>
                              <SelectContent>
                                {projectManagers.map((pm) => (
                                  <SelectItem key={pm.id} value={pm.id}>
                                    {pm.displayName} ({pm.email})
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            
                            <div className="flex gap-2">
                              <Button
                                onClick={() => handleApprove(application.id)}
                                disabled={!selectedPMs[application.id] || processingIds.has(application.id)}
                                className="flex-1 bg-green-600 hover:bg-green-700"
                              >
                                {processingIds.has(application.id) ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–¥–æ–±—Ä–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'}
                              </Button>
                              <Button
                                onClick={() => handleReject(application.id)}
                                disabled={processingIds.has(application.id)}
                                variant="outline"
                                className="text-red-600 border-red-300 hover:bg-red-50"
                              >
                                –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                              </Button>
                            </div>
                          </div>
                        </div>
                      )}

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ */}
                      {application.status === 'approved' && (
                        <div className="p-3 bg-green-50 rounded-lg">
                          <h4 className="font-medium text-green-900 mb-1">–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</h4>
                          <p className="text-sm text-green-700">
                            –û–¥–æ–±—Ä–µ–Ω–∞: {formatDate(application.approvedAt)}
                          </p>
                          {application.projectId && (
                            <p className="text-sm text-green-700">
                              ID –ø—Ä–æ–µ–∫—Ç–∞: {application.projectId}
                            </p>
                          )}
                        </div>
                      )}

                      {application.status === 'rejected' && (
                        <div className="p-3 bg-red-50 rounded-lg">
                          <h4 className="font-medium text-red-900 mb-1">–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</h4>
                          <p className="text-sm text-red-700">
                            –û—Ç–∫–ª–æ–Ω–µ–Ω–∞: {formatDate(application.rejectedAt)}
                          </p>
                          {application.rejectionReason && (
                            <p className="text-sm text-red-700 mt-1">
                              –ü—Ä–∏—á–∏–Ω–∞: {application.rejectionReason}
                            </p>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};