const https = require('https');

async function getAdminToken() {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify({
      email: 'admin@mail.ru',
      password: '123456'
    });

    const options = {
      hostname: 'dddf-1.onrender.com',
      port: 443,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', chunk => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          if (parsed.token) {
            resolve(parsed.token);
          } else {
            reject(new Error('No token in response: ' + responseData));
          }
        } catch (e) {
          reject(new Error('Failed to parse response: ' + responseData));
        }
      });
    });

    req.on('error', reject);
    req.write(data);
    req.end();
  });
}

async function getApplications(token) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'dddf-1.onrender.com',
      port: 443,
      path: '/api/applications',
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', chunk => responseData += chunk);
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve(parsed);
        } catch (e) {
          reject(new Error('Failed to parse applications: ' + responseData));
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
}

async function approveApplication(token, applicationId, pmId) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify({ pmId });

    const options = {
      hostname: 'dddf-1.onrender.com',
      port: 443,
      path: `/api/applications/${applicationId}/approve`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        'Content-Length': data.length
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', chunk => responseData += chunk);
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          body: responseData,
          headers: res.headers
        });
      });
    });

    req.on('error', reject);
    req.write(data);
    req.end();
  });
}

async function testApprove() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ approve application...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∞...');
    const token = await getAdminToken();
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫...');
    const applications = await getApplications(token);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${applications.length}`);

    if (applications.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    // 3. –ù–∞—Ö–æ–¥–∏–º pending –∑–∞—è–≤–∫—É
    const pendingApp = applications.find(app => app.status === 'pending');
    if (!pendingApp) {
      console.log('‚ùå –ù–µ—Ç pending –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏:', applications.map(app => ({
        id: app.id,
        status: app.status,
        type: app.type
      })));
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ pending –∑–∞—è–≤–∫–∞: ${pendingApp.id}`);

    // 4. –ü—ã—Ç–∞–µ–º—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É
    console.log('\n3. –ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...');
    const pmId = 'hZG4fAIUJZfKEEKczZ37mQhZFST2'; // PM user ID
    
    const result = await approveApplication(token, pendingApp.id, pmId);
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${result.status}`);
    console.log(`–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${result.body}`);
    
    if (result.status >= 500) {
      console.log('üö® 500 ERROR DETECTED!');
      console.log('Headers:', JSON.stringify(result.headers, null, 2));
    } else if (result.status >= 400) {
      console.log('‚ö†Ô∏è Client error');
    } else {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testApprove(); 